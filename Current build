;****************************************************************************************************************************************************************************
#Include <GDIP_ALL> ;GDIP:  https://www.autohotkey.com/boards/viewtopic.php?f=6&t=6517
#Include <PopUpWindow_V3> ;https://www.autohotkey.com/boards/viewtopic.php?f=6&t=94961&p=581479#p581479
;****************************************************************************************************************************************************************************
#SingleInstance, Force
SetBatchLines, -1
global WindowElementsListView
Gdip_Startup()

IfNotExist, % A_ScriptDir "\ProjectsFolder"
	FileCreateDir, % A_ScriptDir "\ProjectsFolder"

if not A_IsAdmin
	Run *RunAs "%A_ScriptFullPath%"

HB_BitmapMaker_v7.Setup()
HB_BitmapMaker_v7.Set_Position_ProjectsInnerWindow_Height()()
HB_BitmapMaker_v7.Set_Position_ElementsInnerWindow_Height()()
HB_BitmapMaker_v7.Toggle_All_ProjectsPanel_Tabs()

return

GuiClose:
*!ESC::ExitApp

F1::
	MsgBox, 262144, ,% A_IsAdmin
	return



!1::
	HB_BitmapMaker_v7.Set_Focus_To_ProjectPanel_Tab( "ProjectTab" )
	return
!2::
	HB_BitmapMaker_v7.Set_Focus_To_ProjectPanel_Tab( "WindowTab" )
	return
!3::
	HB_BitmapMaker_v7.Set_Focus_To_ProjectPanel_Tab( "BitmapTab" )
	return	
!4::
	HB_BitmapMaker_v7.Set_Focus_To_ProjectPanel_Tab( "ClassTab" )
	return
!5::
	HB_BitmapMaker_v7.Set_Focus_To_ProjectPanel_Tab( "FunctionTab" )
	return
!6:: 
	HB_BitmapMaker_v7.Set_Focus_To_ProjectPanel_Tab( "LabelTab" )
	return	
!7::
	HB_BitmapMaker_v7.Set_Focus_To_ProjectPanel_Tab( "ScriptTab" )
	return


^1::
	HB_BitmapMaker_v7.Set_Focus_To_ElementPanel_Tab( "WindowElementTab" )
	return
^2::
	HB_BitmapMaker_v7.Set_Focus_To_ElementPanel_Tab( "CodeInsertTab" )
	return


#1::
	HB_BitmapMaker_v7.Toggle_Projects_Panel()
	return
#2::
	HB_BitmapMaker_v7.Toggle_Elements_Panel()
	return
#3::
	HB_BitmapMaker_v7.Toggle_Projects_Panel()
	HB_BitmapMaker_v7.Toggle_Elements_Panel()
	return	


WriteWindowData:	;{
		if( !busy ){
			busy := 1
			HB_BitmapMaker_v7._Write_WindowData()
			busy := 0
			SoundBeep
		}
	return
;}

ToolTipsOff:	;{
	ToolTip
	return
;}

class HB_BitmapMaker_v7	extends Maps {
	
	MainWindowClickEvent( l, w , msg , hwnd ){
		SoundBeep
		SoundBeep
	}
	Setup(){
		This._SetDefaults()
		This._CreateWindows()
		;~ OnMessage( 0x201 , This.MainWindowClickEvent.Bind( This ) )
	}
	_SetDefaults(){
		
		
		
		This.Scale := 1
		This.WindowsList  := [ "MainWindow" , "MainShellWindow" , "MainInnerWindow" , "ProjectsMainWindow" , "ProjectsShellWindow" , "ProjectsInnerWindow" , "ElementsMainWindow" , "ElementsShellWindow" , "ElementsInnerWindow" , "ProjectTab" , "WindowTab" , "BitmapTab" , "ClassTab" , "FunctionTab" , "LabelTab" , "ScriptTab" , "WindowElementTab" , "BitmapElementTab" , "CodeInsertTab" , "ClassElementTab" , "FunctionElementTab" , "LabelElementTab" , "VarableTab" ]
		This.MainWindowList := [ "MainWindow" , "MainShellWindow" , "MainInnerWindow" ]
		This.ProjectsWindowList := [ "ProjectsMainWindow" , "ProjectsShellWindow" , "ProjectsInnerWindow" ]
		This.ElementsWindowList := [ "ElementsMainWindow" , "ElementsShellWindow" , "ElementsInnerWindow" ]
		This.ProjectsWindowTabList := [ "ProjectTab" , "WindowTab" , "BitmapTab" , "ClassTab" , "FunctionTab" , "LabelTab" , "ScriptTab" ]
		This.ElementsWindowTabList := [ "WindowElementTab" , "BitmapElementTab" , "CodeInsertTab" , "ClassElementTab" , "FunctionElementTab" , "LabelElementTab" , "VarableTab" ]
		This.ProjectsWindowToggle := 0
		This.ElementsWindowToggle := 0
		
		This.Projects := {}
		This.ProjectsArray := []
		This.ProjectDir := A_ScriptDir "\ProjectsFolder"
		This.SelectedProject := ""
		This.ProjectFolderList := []
		This.WindowFolderList := []
		This.CodeInsertsFolderList := []
		This.FunctionsFolderList := []
		
		This.WindowElementTypeList_NormalWindow := [ "CodeInsert" , "Add" , "Show" , "Hide" , "Set" , "Get" , "OwnsTips" , "GetControlPosition" , "SetMargin" , "SetFont" , "SetColor" , "SetPosition" , "UpdateDefaults" , "__Delete" , "SetControlList" , "Helper"]
		This.WindowElementTypeList_LayeredWindow := [ "CodeInsert" , "PaintBackground" , "DrawBitmap" , "FillEllipse_Solid" , "CreateBitmapFromFile" , "Show" , "DrawText_Solid" , "UpdateWindow" , "ClearWindow" , "UpdateGraphics" , "DrawCachedBitmap" , "Hide" , "OwnsTips" , "GetControlPosition" , "SetMargin" , "SetFont" , "SetColor" , "SetPosition" , "UpdateDefaults" , "__Delete" , "SetControlList" , "Helper" ]
		
		This.WindowElementsReadyForInput := 0
		
		This.UsedCodeInsert := ""
		
		
		
	}
	_CreateWindows(){
		
		;Main Window
		for k , v in This.MainWindowList	{
			This[ "Setup_" v ]()
			This[ "CreateControls_" v ]()
			This[ "Set_WindowPosition_" v ]()
		}
		;Projects Panel
		for k , v in This.ProjectsWindowList	{
			This[ "Setup_" v ]()
			This[ "CreateControls_" v ]()
			This[ "Set_WindowPosition_" v ]()
		}
		;Elements Panel
		for k , v in This.ElementsWindowList	{
			This[ "Setup_" v ]()
			This[ "CreateControls_" v ]()
			This[ "Set_WindowPosition_" v ]()
		}
		;Projects Panel Tabs
		for k , v in This.ProjectsWindowTabList	{
			This[ "Setup_" v ]()
			This[ "CreateControls_" v ]()
			This[ "Set_AllControl_Positions_" v ]()
		}
		;Elements Panel Tabs
		for k , v in This.ElementsWindowTabList	{
			This[ "Setup_" v ]()
			This[ "CreateControls_" v ]()
			This[ "Set_AllControl_Positions_" v ]()
		}
		
		This.Set_All_TabPositions_ProjectsPanel()
		This.Set_All_TabPositions_ElementsPanel()
	}
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class Maps extends ProjectManagementClass	{
	
	_Get_WindowElement_MethodMap( winName , element := "" ){
		local cc := This.Projects[ This.SelectedProject ].Windows[ This.Projects[ This.SelectedProject ].SelectedWindow ].WindowElements[ element ]
		local idx := 0
		local MethodLib := {}	
		
		
		
		MethodLib.New					:=	This.GetMap_New( winName , cc )
		;******************************************************************************************************************
		MethodLib.Add					:=	This.GetMap_Add( winName , cc )
		;******************************************************************************************************************
		MethodLib.GetControlPosition 	:=	This.GetMap_GetControlPosition( winName , cc )
		;******************************************************************************************************************
		MethodLib.Show					:=	This.GetMap_Show( winName , cc )
		;******************************************************************************************************************
		MethodLib.Hide					:=	This.GetMap_Hide( winName , cc )
		;******************************************************************************************************************
		MethodLib.SetMargin				:=	This.GetMap_SetMargin( winName , cc )
		;******************************************************************************************************************
		MethodLib.SetFont				:=	This.GetMap_SetFont( winName , cc )
		;******************************************************************************************************************		
		MethodLib.SetColor				:=	This.GetMap_SetColor( winName , cc )
		;******************************************************************************************************************	
		MethodLib.SetPosition 			:=	This.GetMap_SetPosition( winName , cc )
		;******************************************************************************************************************
		MethodLib.UpdateDefaults 		:=	This.GetMap_UpdateDefaults( winName , cc )
		;******************************************************************************************************************
		MethodLib.__Delete				:=	This.GetMap___Delete( winName , cc )
		;******************************************************************************************************************
		MethodLib.SetControlList		:=	This.GetMap_SetControlList( winName , cc )
		;******************************************************************************************************************
		MethodLib.Set					:=	This.GetMap_Set( winName , cc )
		;******************************************************************************************************************
		MethodLib.Get					:=	This.GetMap_Get( winName , cc )
		;******************************************************************************************************************
		MethodLib.OwnsTips				:=	This.GetMap_OwnsTips( winName , cc )
		;******************************************************************************************************************
		MethodLib.CodeInsert			:=	This.GetMap_CodeInsert( winName , cc )
		;******************************************************************************************************************
		MethodLib.Helper 				:= 	This.GetMap_Helper( winName , cc )	
		;******************************************************************************************************************	
		MethodLib.PaintBackground		:=	This.GetMap_PaintBackground( winName , cc )
		;******************************************************************************************************************					
		MethodLib.DrawBitmap			:= This.GetMap_DrawBitmap( winName , cc )				
		;******************************************************************************************************************
		MethodLib.DrawText_Solid 		:= This.GetMap_DrawText_Solid( winName , cc )
		;******************************************************************************************************************
		MethodLib.DrawCachedBitmap		:= This.GetMap_DrawCachedBitmap( winName , cc )
		;******************************************************************************************************************
		MethodLib.UpdateWindow			:= This.GetMap_UpdateWindow( winName , cc )
		;******************************************************************************************************************
		MethodLib.ClearWindow			:= This.GetMap_ClearWindow( winName , cc )
		;******************************************************************************************************************
		MethodLib.UpdateGraphics 		:= This.GetMap_UpdateGraphics( winName , cc )
		;******************************************************************************************************************
		MethodLib.CreateBitmapFromFile	:= This.GetMap_CreateBitmapFromFile( winName , cc )
		;******************************************************************************************************************
		MethodLib.FillEllipse_Solid		:= This.GetMap_FillEllipse_Solid( winName , cc )
		;******************************************************************************************************************
		MethodLib.CreateWindowGraphics	:=	{	Output							:	winName ".CreateWindowGraphics()"	}
		
		MethodLib.DestroyWindowsGraphics:=	{	Output							:	winName ".DestroyWindowsGraphics()" 	}
		
		MethodLib.CreateCachedBitmap	:=	{	"Param" ( idx := 1 )			:	"pBitmap" 	,	"Param" idx "_Name" 	:	"pBitmap"
											,	"Param" ++idx					:	false 		,	"Param" idx "_Name" 	:	"Dispose"
											, 	Output							:	winName ".CreateCachedBitmap( " cc.Param1 " , Dispose := " cc.Param2 " )"	}
		
		MethodLib.DisposeCachedbitmap 	:=	{	Output							:	winName ".DisposeCachedbitmap()" 	}
		
		
		
		
		
		
		
		MethodLib.FillPolygon_Solid		:=	{	"Param" ( idx := 1 )			:	"Points := ""50 , 50 | 100 , 100 | 150 , 50 | 50 , 50 """ 	,	"Param" idx "_Name" 	:	"Points"
											,	"Param" ++idx					:	"color := ""0xFF000000""" 		,	"Param" idx "_Name" 	:	"Color"
											, 	Output							:	winName ".FillPolygon_Solid( " cc.Param1 " , " cc.Param2 " )"		}
		
		MethodLib.PolygonShapes			:=	{	"Param" ( idx := 1 )	:	"homeVector := { X: 10 , Y: 10 }" ,	"Param" idx "_Name" 	:	"HomeVector"
											,	"Param" ++idx			:	"color := ""0xFF000000""" 		,	"Param" idx "_Name" 	:	"Color"
											,	"Param" ++idx			:	"radius := 100" 				,	"Param" idx "_Name" 	:	"Radius"
											,	"Param" ++idx			:	"startAngle := 0" 				,	"Param" idx "_Name" 	:	"StartAngle"
											,	"Param" ++idx			:	"sides := 4" 					,	"Param" idx "_Name" 	:	"Sides"
											,	"Param" ++idx			:	"returnString := 1" 			,	"Param" idx "_Name" 	:	"ReturnString"
											,	"Param" ++idx			:	"addExtraWrapArm := 1" 			,	"Param" idx "_Name" 	:	"AddExtraWrapArm"
											,	"Param" ++idx			:	"returnWinSetRegion := 0" 		,	"Param" idx "_Name" 	:	"ReturnWinSetRegion"
											,	"Param" ++idx			:	"autoUpdate := 0" 				,	"Param" idx "_Name" 	:	"AutoUpdate"
											, 	Output					:	winName ".PolygonShapes( " cc.Param1 " , " cc.Param2 " , " cc.Param3 " , " cc.Param4 " , " cc.Param5 " , " cc.Param6 " , " cc.Param7 " , " cc.Param8 " , " cc.Param9 " )"		}
		
		return MethodLib
	}
	GetMap_New( winName , windowElementObject := "" ){
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		obj[ "Param" ++idx ] 	:= """+AlwaysOnTop"""
		obj[ "Param" idx "_Name" ] 	:= "Options"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1

		obj[ "Param" ++idx ] 	:= "WinTitle"
		obj[ "Param" idx "_Name" ] 	:= "Title"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "NormalWindow"
		obj[ "Param" idx "_Name" ] 	:= "WindowType"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "{ AutoShow: 1 , X: ""Center"" , Y: ""Center"" , W: A_ScreenWidth / 2 , H: A_ScreenHeight / 2 , Color: ""22262a"" }"
		obj[ "Param" idx "_Name" ] 	:= "DefaultsObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		obj.Output 		:= winName ".PopUpWindow_V3( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " )"
		obj.Test_Output	:= winName ".PopUpWindow_V3( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " )"

		return obj
	}
	GetMap_Add( winName , windowElementObject := "" ){
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		obj[ "Param" ++idx ] 	:= "controlType := ""Button"""
		obj[ "Param" idx "_Name" ] 	:= " ControlType"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1

		obj[ "Param" ++idx ] 	:= "options := """""
		obj[ "Param" idx "_Name" ] 	:= " Options"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "displayValue := """""
		obj[ "Param" idx "_Name" ] 	:= " DisplayValue"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "controlName := """""
		obj[ "Param" idx "_Name" ] 	:= " ControlName"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "label := """""
		obj[ "Param" idx "_Name" ] 	:= " Label"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "rows := """""
		obj[ "Param" idx "_Name" ] 	:= " Rows"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		obj.Output 		:= winName ".Add( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " , " ( ( cc.Param5_ExpressionMode ) ? ( cc.Param5 ) : ( """" cc.Param5 """" ) ) " , " ( ( cc.Param6_ExpressionMode ) ? ( cc.Param6 ) : ( """" cc.Param6 """" ) ) " )"
		obj.Test_Output	:= winName ".Add( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " , "  " , " ( ( cc.Param6_ExpressionMode ) ? ( cc.Param6 ) : ( """" cc.Param6 """" ) ) " )"

		return obj
	}
	GetMap_Show( winName , windowElementObject := "" ){
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 	:= "options := """""
		obj[ "Param" idx "_Name" ] 	:= "Options"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1

		obj[ "Param" ++idx ] 	:= "title := """""
		obj[ "Param" idx "_Name" ] 	:= "Title"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "transparency :=  255"
		obj[ "Param" idx "_Name" ] 	:= "Transparency"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		if( cc.Param2 = "" && cc.Param3 = "" ){
			obj.Output 				:= winName ".Show( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " )"
			
		}else{
			obj.Output 				:= winName ".Show( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " )"
		}
		obj.Test_Output			:= obj.Output
		return obj
	}
	GetMap_SetFont( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 					:= "type := """"" 															
		obj[ "Param" idx "_Name" ] 				:= "Type"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "Size := """"" 															
		obj[ "Param" idx "_Name" ] 				:= "Size"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "Color := """"" 															
		obj[ "Param" idx "_Name" ] 				:= "Color"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "Options := """"" 															
		obj[ "Param" idx "_Name" ] 				:= "Options"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".SetFont( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_SetColor( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 					:= "color := ""22262A"""															
		obj[ "Param" idx "_Name" ] 				:= "Color"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "controlColor := ""12161A"""														
		obj[ "Param" idx "_Name" ] 				:= "ControlColor"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".SetColor( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_Hide( winName , windowElementObject := "" ){
		local obj := {} 
		obj.Output								:= winName ".Hide()"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_Set( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject

		obj[ "Param" ++idx ] 					:= "controlObject"														
		obj[ "Param" idx "_Name" ] 				:= "ControlObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "subCommand := """""														
		obj[ "Param" idx "_Name" ] 				:= "SubCommand"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "value := """""													
		obj[ "Param" idx "_Name" ] 				:= "Value"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".Set( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_Get( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 					:= "outputVar"														
		obj[ "Param" idx "_Name" ] 				:= "OutputVar"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "controlObject"														
		obj[ "Param" idx "_Name" ] 				:= "ControlObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "subCommand := """""														
		obj[ "Param" idx "_Name" ] 				:= "SubCommand"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= cc.Param1 " := " winName ".Get( " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
		
	}
	GetMap_OwnsTips( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj.Output								:= winName ".OwnsTips()"
		obj.Test_Output							:= obj.Output
		return obj
		
	}
	GetMap_GetControlPosition( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 					:= "controlObject"														
		obj[ "Param" idx "_Name" ] 				:= "ControlObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".GetControlPosition( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_SetMargin( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject

		obj[ "Param" ++idx ] 					:= 10														
		obj[ "Param" idx "_Name" ] 				:= "MarginX"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= 10													
		obj[ "Param" idx "_Name" ] 				:= "MarginY"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".SetMargin( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_SetPosition( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject

		obj[ "Param" ++idx ] 					:= "x_or_Rectobj := """""													
		obj[ "Param" idx "_Name" ] 				:= "X_Or_RectObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "y := """""													
		obj[ "Param" idx "_Name" ] 				:= "Y"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "w := """""													
		obj[ "Param" idx "_Name" ] 				:= "W"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "h := """""													
		obj[ "Param" idx "_Name" ] 				:= "H"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".SetPosition( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_UpdateDefaults( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject

		obj[ "Param" ++idx ] 					:= "defaultsObject"													
		obj[ "Param" idx "_Name" ] 				:= "DefaultsObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".UpdateDefaults( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap___Delete( winName , windowElementObject := "" ){
		
		local obj := {} 
		obj.Output								:= winName " := """""
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_SetControlList( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject

		obj[ "Param" ++idx ] 					:= "controlObject"														
		obj[ "Param" idx "_Name" ] 				:= "ControlObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "list := """""													
		obj[ "Param" idx "_Name" ] 				:= "List"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "choose := """""													
		obj[ "Param" idx "_Name" ] 				:= "Choose"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".SetControlList( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_CodeInsert( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		local project := This.SelectedProject
		local codeInsert := This.Projects[ project ].SelectedCodeInsert
		obj[ "Param" ++idx ] := codeInsert
		obj[ "Param" idx "_Name" ] 				:= codeInsert
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		FileRead, out , % This.ProjectDir "\" project "\CodeInserts\" cc.Param1 "\codeInsertCode.ahk"
		
		obj.Output := out
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_Helper( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj.Output 								:= "PopUpWindow_HelperClass.Helper()"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_PaintBackground( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 					:= "Color := ""0xFF000000""" 															
		obj[ "Param" idx "_Name" ] 				:= "Color or Object"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "AutoUpdate := 0" 															
		obj[ "Param" idx "_Name" ] 				:= "AutoUpdate"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
										
		obj.Output								:= winName ".PaintBackground( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " ) `;{ Color: " cc.Param1 " , X: 2 , Y: 2 , W: " winName ".W - 4 , H: " winName ".H - 4 , Roundness: 10 }"	
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_DrawText_Solid( winName , windowElementObject := "" ){
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		obj[ "Param" ++idx ] 	:= """SampleText"""
		obj[ "Param" idx "_Name" ] 	:= " Text"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1

		obj[ "Param" ++idx ] 	:= "rectObject"
		obj[ "Param" idx "_Name" ] 	:= " RectObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "fontObject"
		obj[ "Param" idx "_Name" ] 	:= " FontObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "offset := 0"
		obj[ "Param" idx "_Name" ] 	:= "Offset"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "bottomColor := ""0xFF000000"""
		obj[ "Param" idx "_Name" ] 	:= "BottomColor"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "AutoUpdate := 0"
		obj[ "Param" idx "_Name" ] 	:= "AutoUpdate"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output 		:= winName ".DrawText_Solid( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " , " ( ( cc.Param5_ExpressionMode ) ? ( cc.Param5 ) : ( """" cc.Param5 """" ) ) " , " ( ( cc.Param6_ExpressionMode ) ? ( cc.Param6 ) : ( """" cc.Param6 """" ) ) " )"
		obj.Test_Output	:= obj.Output
		return obj
	}
	GetMap_DrawBitmap( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 	:= "pBitmap := """
		obj[ "Param" idx "_Name" ] 	:= "pBitmap"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1

		obj[ "Param" ++idx ] 	:= "0"
		obj[ "Param" idx "_Name" ] 	:= " X_Position"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "0"
		obj[ "Param" idx "_Name" ] 	:= " Y_Position"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= winName ".W"
		obj[ "Param" idx "_Name" ] 	:= "W_Position"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= winName ".H"
		obj[ "Param" idx "_Name" ] 	:= "H_Position"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "0"
		obj[ "Param" idx "_Name" ] 	:= "DisposeBitmap"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "AutoUpdate := 0"
		obj[ "Param" idx "_Name" ] 	:= "AutoUpdate"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output 		:= winName ".DrawBitmap( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , { X: " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , Y: " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , W: " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " , H: " ( ( cc.Param5_ExpressionMode ) ? ( cc.Param5 ) : ( """" cc.Param5 """" ) ) " } , " ( ( cc.Param6_ExpressionMode ) ? ( cc.Param6 ) : ( """" cc.Param6 """" ) ) " , " ( ( cc.Param7_ExpressionMode ) ? ( cc.Param7 ) : ( """" cc.Param7 """" ) ) " )"
		obj.Test_Output	:= obj.Output
		return obj
		
	}
	GetMap_DrawCachedBitmap( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject

		obj[ "Param" ++idx ] 					:= "AutoUpdate := false"													
		obj[ "Param" idx "_Name" ] 				:= "AutoUpdate"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".DrawCachedBitmap( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_UpdateWindow( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject

		obj[ "Param" ++idx ] 					:= "Alpha := 255"													
		obj[ "Param" idx "_Name" ] 				:= "Alpha"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".UpdateWindow( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_ClearWindow( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject

		obj[ "Param" ++idx ] 					:= "AutoUpdate := false"													
		obj[ "Param" idx "_Name" ] 				:= "AutoUpdate"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= winName ".ClearWindow( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_UpdateGraphics( winName , windowElementObject := "" ){
		
		local obj := {} 
		local cc := windowElementObject
		
		obj.Output								:= winName ".UpdateGraphics()"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_CreateBitmapFromFile( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 					:= "ImageBitmap"													
		obj[ "Param" idx "_Name" ] 				:= "ImageBitmapVar"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 					:= "path := """""													
		obj[ "Param" idx "_Name" ] 				:= "ImageFilePath"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output								:= cc.Param1 " := " winName ".CreateBitmapFromFile( " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " )"
		obj.Test_Output							:= obj.Output
		return obj
	}
	GetMap_FillEllipse_Solid( winName , windowElementObject := "" ){
		
		local idx := 0
		local obj := {} 
		local cc := windowElementObject
		
		obj[ "Param" ++idx ] 	:= "Color := ""0xFFFF0000"""
		obj[ "Param" idx "_Name" ] 	:= " Color"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1

		obj[ "Param" ++idx ] 	:= "x_Or_RectObject := 0"
		obj[ "Param" idx "_Name" ] 	:= "x_Or_RectObject"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "y := 0"
		obj[ "Param" idx "_Name" ] 	:= " Y_Position"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "w := 10"
		obj[ "Param" idx "_Name" ] 	:= "Width"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "h := 10"
		obj[ "Param" idx "_Name" ] 	:= "Height"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		obj[ "Param" ++idx ] 	:= "AutoUpdate := 0"
		obj[ "Param" idx "_Name" ] 	:= "AutoUpdate"
		obj[ "Param" idx "_ExpressionMode" ] 	:= 1
		
		if( !isObject( cc ) )
			cc := obj
		
		obj.Output 		:= winName ".FillEllipse_Solid( " ( ( cc.Param1_ExpressionMode ) ? ( cc.Param1 ) : ( """" cc.Param1 """" ) ) " , " ( ( cc.Param2_ExpressionMode ) ? ( cc.Param2 ) : ( """" cc.Param2 """" ) ) " , " ( ( cc.Param3_ExpressionMode ) ? ( cc.Param3 ) : ( """" cc.Param3 """" ) ) " , " ( ( cc.Param4_ExpressionMode ) ? ( cc.Param4 ) : ( """" cc.Param4 """" ) ) " , " ( ( cc.Param5_ExpressionMode ) ? ( cc.Param5 ) : ( """" cc.Param5 """" ) ) " , " ( ( cc.Param6_ExpressionMode ) ? ( cc.Param6 ) : ( """" cc.Param6 """" ) ) " )"
		obj.Test_Output	:= obj.Output
		return obj
	}
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ProjectManagementClass extends FileManagementClass	{
	
	Add_Project( projectName ){
		local cc
		cc := This.Projects[ projectName ] := {}
		This.ProjectsArray.Push( cc )
		cc.Index := This.ProjectsArray.Length()
		cc.Name := projectName 
		This.SelectedProject := projectName
		cc.Path := This.ProjectDir "\" projectName
		This.Write_ProjectFolder( projectName )
		cc.Windows := {}
		cc.WindowsArray := []
		cc.SelectedWindow := ""
		cc.CodeInserts := {}
		cc.CodeInsertsArray := []
		cc.SelectedCodeInsert := ""
		cc.Functions := {}
		cc.FunctionsArray := []
		cc.SelectedFunction := ""
		cc.ScriptElements := []
		cc.SelectedSection := "Section 1"
		
	}
	Add_Window( windowName , windowType , windowOptions , windowTitle , WindowDefaultsObjectString := "" , WindowFunctionParams := "" ){
		local project := This.SelectedProject
		local cc := This.Projects[ project ].Windows[ windowName ] := {}
		cc.WindowName := windowName 
		cc.WindowType := windowType
		cc.WindowOptions := windowOptions
		cc.WindowTitle := windowTitle
		cc.WindowDefaultsObjectString := WindowDefaultsObjectString
		cc.WindowFunctionParams := WindowFunctionParams
		cc.FolderPath 		:= This.ProjectDir "\" project "\Windows\" windowName 
		cc.iniPath 			:= This.ProjectDir "\" project "\Windows\" windowName "\Window_ini_Data.ini"
		cc.ScriptPath 		:= This.ProjectDir "\" project "\Windows\" windowName "\WindowFunctionCode.ahk"
		cc.TestScriptPath 	:= This.ProjectDir "\" project "\Windows\" windowName "\Window_Test_FunctionCode.ahk"
		;~ MsgBox, % cc.ScriptPath
		This.Projects[ project ].SelectedWindow := windowName
		This.Projects[ project ].WindowsArray := ""
		for k , v in This.Projects[ project ].Windows	{
			cc := This.Projects[ project ].Windows[ k ]
			cc.Index := A_Index
			This.Projects[ project ].WindowsArray.Push( cc )
		}
		This.Projects[ project ].Windows[ windowName ].WindowElements := {}
		This.Projects[ project ].Windows[ windowName ].SelectedWindowElement := 1
		This.Write_WindowFolder( windowName )
		This._Write_WindowData()
		
		/*
		;This was an atempt to create a code insert for every new window. This would be how you add params to a winodw constructor but I am going with adding more params to the window tab.		
		cc := This.Projects[ project ].Windows[ windowName ]
		dd := This
		FileRead, out1 , % cc.ScriptPath
		;~ MsgBox, % Out1
		This.Add_CodeInsert( windowName "Constructor" , "" , Out1 )
		;7777777777777777777777777
		This.Load_CodeInserts()
		This.Update_Details_CodeInsertTab()
		;7777777777777777777777777
		*/
	}
	Add_WindowElement( elementType , startFresh := 0 ){
		local project := This.SelectedProject
		local window := This.Get_Window()
		local map := This._Get_WindowElement_MethodMap( window )
		This.Projects[ project ].Windows[ window ].WindowElements.Push( map[ elementType ] )
		;~ MsgBox, % map[ elementType ].Param1
		cc := This.Projects[ project ].Windows[ window ].WindowElements[ This.Projects[ project ].Windows[ window ].WindowElements.Length() ]
		cc.Index := This.Projects[ project ].Windows[ window ].SelectedWindowElement := This.Projects[ project ].Windows[ window ].WindowElements.Length()
		cc.ElementType := elementType
		if( startFresh ){
			for k , v in cc	
			if( inStr( k , "Param" ) && !inStr( k , "Expression") && !InStr( k , "Name" ) )
				cc[ k ] := ""
		}	
		This._Write_WindowData()
	}	
	Add_CodeInsert( CodeInsertName , CodeInsertNotes , CodeInsertContents , CodeInsertSection ){
		local project := This.SelectedProject
		local cc := This.Projects[ project ].CodeInserts[ CodeInsertName ] := {}
		cc.CodeInsertName := CodeInsertName 
		cc.CodeInsertNotes := CodeInsertNotes
		cc.CodeInsertContents := CodeInsertContents
		cc.CodeInsertSection := CodeInsertSection
		MsgBox, % cc.CodeInsertSection
		cc.FolderPath 		:= This.ProjectDir "\" project "\CodeInserts\" CodeInsertName 
		cc.NotesPath 		:= This.ProjectDir "\" project "\CodeInserts\" CodeInsertName "\CodeInsertNotes.txt"
		cc.CodePath 		:= This.ProjectDir "\" project "\CodeInserts\" CodeInsertName "\CodeInsertCode.ahk"
		;~ cc.TestScriptPath 	:= This.ProjectDir "\" project "\CodeInserts\" windowName "\Window_Test_FunctionCode.ahk"
		;~ MsgBox, % cc.ScriptPath
		This.Projects[ project ].SelectedCodeInsert := CodeInsertName
		This.Projects[ project ].CodeInsertsArray := ""
		for k , v in This.Projects[ project ].CodeInserts	{
			cc := This.Projects[ project ].CodeInserts[ k ]
			cc.Index := A_Index
			This.Projects[ project ].CodeInsertsArray.Push( cc )
		}
		;~ This.Projects[ project ].CodeInserts[ CodeInsertName ].WindowElements := {}
		;~ This.Projects[ project ].Windows[ windowName ].SelectedWindowElement := 1
		This.Write_CodeInsertFolder( CodeInsertName )
		This._Write_CodeInsertData()
	}
	Add_Function( FunctionName , FunctionNotes , FunctionContents ){
		local project := This.SelectedProject
		local cc := This.Projects[ project ].Functions[ FunctionName ] := {}
		cc.FunctionName := FunctionName 
		cc.FunctionNotes := FunctionNotes
		cc.FunctionContents := FunctionContents
		
		cc.FolderPath 		:= This.ProjectDir "\" project "\Functions\" FunctionName 
		cc.NotesPath 		:= This.ProjectDir "\" project "\Functions\" FunctionName "\FunctionNotes.txt"
		cc.CodePath 		:= This.ProjectDir "\" project "\Functions\" FunctionName "\FunctionCode.ahk"
		;~ cc.TestScriptPath 	:= This.ProjectDir "\" project "\Functions\" windowName "\Window_Test_FunctionCode.ahk"
		;~ MsgBox, % cc.ScriptPath
		This.Projects[ project ].SelectedFunction := FunctionName
		This.Projects[ project ].FunctionsArray := ""
		for k , v in This.Projects[ project ].Functions	{
			cc := This.Projects[ project ].Functions[ k ]
			cc.Index := A_Index
			This.Projects[ project ].FunctionsArray.Push( cc )
		}
		;~ This.Projects[ project ].Functions[ FunctionName ].WindowElements := {}
		;~ This.Projects[ project ].Windows[ windowName ].SelectedWindowElement := 1
		This.Write_FunctionFolder( FunctionName )
		This._Write_FunctionData()
	}
	Create_Script( iniOnly := 1 ){
		
		local project := This.SelectedProject
		
		if( project = "" ){
			SoundBeep
			SoundBeep
			return
		}
		dir := This.ProjectDir "\" project "\Script Folder\"
		ToolTip, Deleting dir
		This._RemoveDirectory( dir )
		ToolTip, Done
		sleep, 300
		ToolTip, Writing Dir
		This._WriteDirectory( dir )
		ToolTip, Done
		sleep, 300
		ToolTip, Writing Script ini data
		This.Write_iniData_Script( dir )
		ToolTip, Done
		sleep, 300
		ToolTip
	}
	Get_ProjectList(){
		local projectsString := ""
		for k , v in This.Projects	
			projectsString .= k "|"
		return projectsString
	}
	Get_WindowList(){
		local WindowsString := ""
		for k , v in This.Projects[ This.SelectedProject ].Windows	
			WindowsString .= k "|"
		return WindowsString
	}
	Get_WindowElementList(){
		local WindowElementsString := ""
		local project := This.SelectedProject
		local window := This.Projects[ project ].SelectedWindow
		local elements := This.Projects[ project ].Windows[ window ].WindowElements
		for k , v in elements
			WindowElementsString .= v "|"
		return WindowElementsString
	}	
	Load_Project( projectName ){
		local cc := This.Projects[ projectName ] := {}
		
		This.SelectedProject := projectName
		This.ProjectsArray.Push( cc )
		ToolTip, % "Loading Project: " projectName
		cc.Index := This.ProjectsArray.Length()
		cc.Name := projectName
		if( This.Check_For_WindowFolders() ){
			This.Load_Windows()
			This.Update_Details_WindowTab()
			;~ SoundBeep
			;~ SoundBeep
			;~ SoundBeep
		}
		if( This.Check_For_CodeInsertFolders() ){
			This.Load_CodeInserts()
			This.Update_Details_CodeInsertTab()
			;~ SoundBeep
			;~ SoundBeep
			;~ SoundBeep
		}
		if( This.Check_For_FunctionFolders() ){
			This.Load_Functions()
			This.Update_Details_FunctionTab()
			;~ SoundBeep
			;~ SoundBeep
			;~ SoundBeep
		}
		
		;**************************************
		;**************************************
		;script
		;if blah blah
		;~ This.Load_Script()
		;This.Update_Details_ScriptTab()
		
		This.Projects[ This.SelectedProject ].ScriptElements := []
		This.Projects[ This.SelectedProject ].SelectedScriptElement := ""
		;**************************************
		;**************************************
		This.Read_iniData_Script()
		This.Update_Details_ScriptTab()
		ToolTip, Done
		Sleep, 300
		ToolTip
	}
	Load_Windows(){
		local project := This.SelectedProject 
		local cc
		This.Get_Windows_Folder_List()
		This.Read_ProjectWindows()
		;~ MsgBox, % "load: " This.WindowFolderList[ 1 ] "`nLength: " This.WindowFolderList.Length() 
				;~ . "`nWin: " This.Projects[ This.SelectedProject ].SelectedWindow
		
	}
	Load_CodeInserts(){
		local project := This.SelectedProject 
		;~ local cc
		This.Get_CodeInserts_Folder_List()
		This.Read_ProjectCodeInserts()
	}
	Load_Functions(){
		local project := This.SelectedProject 
		;~ local cc
		This.Get_Functions_Folder_List()
		This.Read_ProjectFunctions()
	}
	Load_Script(){
		local project := This.SelectedProject 
		;~ local cc
		This.Get_Scripts_Folder_List()
		This.Read_ProjectScripts()
	}
	Check_WindowList( window ){
		local project := This.SelectedProject
		for k , v in This.Projects[ project ].Windows	{
			if( window = k )
				return 1
		}
		return 0
	}
	Check_CodeInsertList( CodeInsertName ){
		local project := This.SelectedProject
		for k , v in This.Projects[ project ].CodeInserts	{
			if( CodeInsertName = k )
				return 1
		}
		return 0
	}
	Check_FunctionList( FunctionName ){
		local project := This.SelectedProject
		for k , v in This.Projects[ project ].Functions	{
			if( FunctionName = k )
				return 1
		}
		return 0
	}
	Get_Project(){
		return This.SelectedProject
	}
	Get_Window(){
		return This.Projects[ This.SelectedProject ].SelectedWindow
	}
	Get_WindowElement(){
		return This.Projects[ This.SelectedProject ].Windows[ This.Get_Window() ].SelectedWindowElement
	}
	Get_WindowElement_Object(){
		return This.Projects[ This.SelectedProject ].Windows[ This.Get_Window() ].WindowElements[ This.Get_WindowElement() ]
	}
	Get_WindowElements(){
		local project := This.SelectedProject
		local window := This.Get_Window()
		return This.Projects[ project ].Windows[ window ].WindowElements
	}
	Move_WindowElement( elementIndex , Dir := 0 , InsertAt := "" ){
		local project := This.SelectedProject
		local window := This.Get_Window()
		local elements := This.Projects[ project ].Windows[ window ].WindowElements
		local tempElement := This.Projects[ project ].Windows[ window ].WindowElements[ elementIndex ]
		This.Projects[ project ].Windows[ window ].WindowElements.RemoveAt( elementIndex )
		if( InsertAt ){
			This.Projects[ project ].Windows[ window ].WindowElements.InsertAt( InsertAt , tempElement )
			This.Projects[ project ].Windows[ window ].SelectedWindowElement := InsertAt
		}else if( !Dir ){
			This.Projects[ project ].Windows[ window ].WindowElements.InsertAt( elementIndex - 1 , tempElement )
			This.Projects[ project ].Windows[ window ].SelectedWindowElement := elementIndex - 1
		}else{
			This.Projects[ project ].Windows[ window ].WindowElements.InsertAt( elementIndex + 1 , tempElement )
			This.Projects[ project ].Windows[ window ].SelectedWindowElement := elementIndex + 1
		}
		for k , v in This.Projects[ project ].Windows[ window ].WindowElements	
			This.Projects[ project ].Windows[ window ].WindowElements[ k ].Index := k 
		This._Write_WindowData()
		This.Update_Details_WindowElementTab()
	}
	Set_Selected_WindowElement( newIndex ){
		local project := This.SelectedProject
		local window := This.Get_Window()
		This.Projects[ project ].Windows[ window ].SelectedWindowElement := newIndex
	}
	Copy_WindowElement( elementIndex ){
		local tempElement := {}
		local elements := This.Get_WindowElements()
		for k , v in elements[ elementIndex ]	{
			tempElement[ k ] := v
			
		}
		tempElement.Index := elements.Length() + 1
		elements.Push( tempElement )
		This.Set_Selected_WindowElement( elements.Length() )
		This._Write_WindowData()
	}
	Delete_WindowElement(){
		local project := This.SelectedProject
		local window := This.Get_Window()
		local element 	:= This.Get_WindowElement()
		if( !element )
			return
		This.Projects[ project ].Windows[ window ].WindowElements.RemoveAt( element )
		This.Set_Selected_WindowElement( element - 1 )
		This._Write_WindowData()
		This.Update_Details_WindowElementTab()
	}
	_Delete_Window(){
		local project := This.SelectedProject
		local window := This.Get_Window()
		local cc := This.Projects[ project ].Windows[ window ]
		local path := This.Projects[ project ].Windows[ window ].FolderPath
		This._RemoveDirectory( path )
		This.Projects[ project ].Windows.Remove( window )
		for k , v in This.Projects[ project ].Windows	{
			This.Projects[ project ].SelectedWindow := k 
			break
		}
		This.Update_Details_WindowTab()
		This.Update_Details_WindowElementTab()
	}
	_Delete_CodeInsert(){
		local project := This.SelectedProject
		local codeInsert := This.Projects[ project ].SelectedCodeInsert
		local cc := This.Projects[ project ].CodeInserts[ CodeInsert ]
		local path := This.ProjectDir "\" project "\CodeInserts\" codeInsert "\"
		This._RemoveDirectory( path )
		This.Projects[ project ].CodeInserts.Remove( codeInsert )
		for k , v in This.Projects[ project ].CodeInserts	{
			This.Projects[ project ].SelectedCodeInsert := k 
			break
		}
		This.Update_Details_CodeInsertTab()
		;~ This.Update_Details_WindowElementTab()
	}
	_Copy_Window( NewName ){
		local project := This.SelectedProject
		local window := This.Get_Window()
		local cc := This.Projects[ project ].Windows[ window ]
		local dd 
		This.Add_Window( NewName , cc.windowType , cc.windowOptions , cc.windowTitle , cc.WindowDefaultsObjectString , cc.WindowFunctionParams )
		dd := This.Projects[ project ].Windows[ NewName ].WindowElements
		cc := This.Projects[ project ].Windows[ window ].WindowElements
		for k , v in cc	{
			dd[ k ] := {}
			for i , j in cc[ k ]	{
				dd[ k ][ i ] := cc[ k ][ i ]
			}
		}
		
		
		This.Update_Details_WindowTab()
		This.Update_Details_WindowElementTab()
	}
	ClearAllParams(){
		local element 	:= This.Get_WindowElement()
		local elements := This.Get_WindowElements()
		if( !element || !GetKeyState( "Shift" ) )
			return
		for k , v in elements[ element ]	
			if( inStr( k , "Param" ) && !inStr( k , "Expression") && !InStr( k , "Name" ) )
				elements[ element ][ k ] := ""
		
		This.Update_Details_WindowElementTab()
	}
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class FileManagementClass extends ClassElementTabEvents	{
	
	Get_ProjectFolder_List( excludeLoadedProjects := 0 ){
		local Dir := This.ProjectDir 
		local arr , value
		This.ProjectFolderList := []
		Loop, Files , % Dir "\*.*"  , D
		{
			arr := StrSplit( A_LoopFileFullPath , "\" )
			if( ( !This.Projects.HasKey( ( value := arr[ arr.Length() ] ) ) && excludeLoadedProjects ) || !excludeLoadedProjects )
				This.ProjectFolderList.Push( value )
		}
	}
	Check_ProjectFolder_List( projectName ){
		local k , v 
		This.Get_ProjectFolder_List()
		for k , v in This.ProjectFolderList	{
			if( projectName = v ){
				;~ MsgBox, % "projectName: " projectName "`nv: " v
				return 1
				
			}
		}
		return 0
	}
	Write_ProjectFolder( projectName ){
		local cc := This.Projects[ projectName ]
		;~ This._RemoveDirectory( cc.Path )
		This._WriteDirectory( cc.Path )
	}
	Write_WindowFolder( windowName ){
		local project := This.SelectedProject
		local cc := This.Projects[ project ].Windows[ windowName ]
		This._WriteDirectory( cc.FolderPath )
	}
	Write_CodeInsertFolder( CodeInsertName ){
		local project := This.SelectedProject
		local cc := This.Projects[ project ].CodeInserts[ CodeInsertName ]
		;~ MsgBox, % "path: " cc.FolderPath
		This._WriteDirectory( cc.FolderPath )
	}
	Write_iniData_Script( dir ){
		local project := This.SelectedProject
		local scriptElements := This.Projects[ project ].ScriptElements
		local path := dir "Script Elements Data.ini"
		static busy 
		if( busy )
			return
		busy := 1
		ToolTip, Writing ini data.
		IniWrite, % scriptElements.Length() , % path , Number Of Elements, ElementCount
		for k , v in scriptElements	{
			cc := scriptElements[ k ]
			IniWrite, % cc.Type , % path , % "Element " k , Type
			IniWrite, % cc.Name , % path , % "Element " k , Name
		}
		;ToolTip, done
		sleep, 300
		busy := 0
		ToolTip,
		;~ MsgBox, % "Here: " dir 
		;~ Run, % "Edit " path
	}
	Write_FunctionFolder( FunctionName ){
		local project := This.SelectedProject
		local cc := This.Projects[ project ].Functions[ FunctionName ]
		;~ MsgBox, % "path: " cc.FolderPath
		This._WriteDirectory( cc.FolderPath )
	}
	_WriteDirectory( dir ){
		FileCreateDir, % dir
	}
	_RemoveDirectory( dir ){
		static busy 
		if( busy )
			return
		busy := 1
		IfExist, % dir
			FileRemoveDir, % dir , 1
		sleep, 100
		ToolTip, dir deleted
		SetTimer, ToolTipsOff , -1500
		busy := 0
	}
	Check_For_WindowFolders(){
		local project := This.SelectedProject 
		local dir := This.ProjectDir
		local path := This.ProjectDir "\" project "\Windows"
		Loop, Files , % path "\*.*"  , D
			return 1
		return 0
	}
	Check_For_CodeInsertFolders(){
		local project := This.SelectedProject 
		local dir := This.ProjectDir
		local path := This.ProjectDir "\" project "\CodeInserts"
		Loop, Files , % path "\*.*"  , D
			return 1
		return 0
	}
	Check_For_FunctionFolders(){
		local project := This.SelectedProject 
		local dir := This.ProjectDir
		local path := This.ProjectDir "\" project "\Functions"
		Loop, Files , % path "\*.*"  , D
			return 1
		return 0
	}
	Get_Windows_Folder_List(){
		local project := This.SelectedProject 
		local dir := This.ProjectDir
		local path := dir "\" project "\Windows"
		local cc := This.WindowFolderList := []
		Loop, Files , % path "\*.*"  , D	
		{
			arr := StrSplit( A_LoopFileFullPath , "\" )
			cc.Push( arr[ arr.Length() ] )
		}
		
	}
	Get_CodeInserts_Folder_List(){
		local project := This.SelectedProject 
		local dir := This.ProjectDir
		local path := dir "\" project "\CodeInserts"
		local cc := This.CodeInsertsFolderList := []
		Loop, Files , % path "\*.*"  , D	
		{
			arr := StrSplit( A_LoopFileFullPath , "\" )
			cc.Push( arr[ arr.Length() ] )
		}
		
	}
	Get_Functions_Folder_List(){
		local project := This.SelectedProject 
		local dir := This.ProjectDir
		local path := dir "\" project "\Functions"
		local cc := This.FunctionsFolderList := []
		Loop, Files , % path "\*.*"  , D	
		{
			arr := StrSplit( A_LoopFileFullPath , "\" )
			cc.Push( arr[ arr.Length() ] )
		}
		
	}
	Read_iniData_Script(){
		local project := This.SelectedProject
		
		
		local path := This.ProjectDir "\" project "\Script Folder\Script Elements Data.ini"
		
		
		
		
		
		IniRead, ElementCount , % path , Number Of Elements, ElementCount
		;~ MsgBox, % ElementCount
		This.Projects[ project ].ScriptElements := []
		
		Loop, % ElementCount	{
			cc := scriptElements[ k ]
			IniRead, type , % path , % "Element " A_Index , Type
			IniRead, name , % path , % "Element " A_Index , Name
			This.Projects[ project ].ScriptElements.Push( { Name: name , Type: type } )
		}
		This.Projects[ This.SelectedProject ].SelectedScriptElement := ElementCount
	}
	Read_ProjectWindows(){
		local project := This.SelectedProject
		local Dir := This.ProjectDir "\" project "\Windows\" 
		local cc := This.Projects[ project ]
		local arr
		local fName
		cc.Windows := {}
		cc.WindowsArray := []
		Loop, Files , % Dir "\*.*"  , D
		{
			arr := StrSplit( A_LoopFileFullPath , "\" )
			fName := arr[ arr.Length() ]
			IniRead, WindowName , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , WindowName , ""
			IniRead, WindowType , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , WindowType , ""
			IniRead, WindowOptions , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , WindowOptions , ""
			IniRead, WindowTitle , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , WindowTitle , ""
			IniRead, WindowDefaultsObjectString , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , WindowDefaultsObjectString , ""
			IniRead, WindowFunctionParams , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , WindowFunctionParams , ""
			
			IniRead, FolderPath , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , FolderPath
			IniRead, iniPath , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , iniPath
			IniRead, ScriptPath , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , ScriptPath
			IniRead, TestScriptPath , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowDetails , TestScriptPath
			
			
			cc := This.Projects[ project ].Windows[ WindowName ] := {}
			This.Projects[ project ].WindowsArray.Push( cc )
			cc.Index := This.Projects[ project ].WindowsArray.Length()
			cc.WindowName := WindowName
			cc.WindowType := WindowType
			cc.WindowOptions := WindowOptions
			cc.WindowTitle := WindowTitle
			cc.WindowDefaultsObjectString := WindowDefaultsObjectString
			cc.WindowFunctionParams := WindowFunctionParams
			
			cc.FolderPath := FolderPath
			cc.iniPath := iniPath
			cc.ScriptPath := ScriptPath
			cc.TestScriptPath := TestScriptPath
			
			This.Projects[ project ].SelectedWindow := WindowName
			cc.WindowElements := []
			map := This._Get_MethodMap( window )
			IniRead, numberOfElements , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowElementDetails , numberOfElements
			cc.SelectedWindowElement := 1
			Loop, % numberOfElements	{
				index := A_Index
				cc.WindowElements[ index ] := {}
				IniRead, elementType , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowElement%index% , ElementType
				cc.WindowElements[ index ].ElementType := elementType
				IniRead, paramString , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowElement%index% , params
				IniRead, paramNameString , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowElement%index% , paramNames
				IniRead, paramExpressionModeString , % A_ScriptDir "\ProjectsFolder\" project "\Windows\" fName "\Window_ini_Data" , WindowElement%index% , paramExpressionModes
				if( !instr( paramString , "|" ) ){
					paramString := strReplace( paramString , "[p]" , "|"  )
					;~ MsgBox, % paramString
					paramString := strReplace( paramString , "[nl]" , "`n"  )
					paramString := StrSplit( paramString , "|" , "|" )
					loop, % paramString.Length() - 1
						cc.WindowElements[ index ][ "Param" A_Index ] := Trim( paramString[ A_Index ] )
				}else if( !InStr( paramString , "#" ) ){
					paramString := strReplace( paramString , "[p]" , "#"  )
					paramString := strReplace( paramString , "[nl]" , "`n"  )
					paramString := StrSplit( paramString , "#" , "#" )
					loop, % paramString.Length() - 1
						cc.WindowElements[ index ][ "Param" A_Index ] := Trim( paramString[ A_Index ] )
				}else if( !InStr( paramString , "@" ) ){
					paramString := strReplace( paramString , "[p]" , "@"  )
					paramString := strReplace( paramString , "[nl]" , "`n"  )
					paramString := StrSplit( paramString , "@" , "@" )
					loop, % paramString.Length() - 1
						cc.WindowElements[ index ][ "Param" A_Index ] := Trim( paramString[ A_Index ] )
				}else{
					Gui, +OwnDialogs
					MsgBox,,Error , The delimeter can't be set with the current loadout.`nA new delimeter needs to be added to the code.
				}
				if( !instr( paramNameString , "|" ) ){
					paramNameString := strReplace( paramNameString , "[p]" , "|"  )
					paramNameString := StrSplit( paramNameString , "|" , "|" )
					loop, % paramNameString.Length() - 1	{
						cc.WindowElements[ index ][ "Param" A_Index "_Name"] := Trim( paramNameString[ A_Index ] )
					}
				}else if( !instr( paramNameString , "#" ) ){
					paramNameString := strReplace( paramNameString , "[p]" , "#"  )
					paramNameString := StrSplit( paramNameString , "#" , "#" )
					loop, % paramNameString.Length() - 1	{
						cc.WindowElements[ index ][ "Param" A_Index "_Name"] := Trim( paramNameString[ A_Index ] )
					}
				}else if( !instr( paramNameString , "@" ) ){
					paramNameString := strReplace( paramNameString , "[p]" , "@"  )
					paramNameString := StrSplit( paramNameString , "@" , "@" )
					loop, % paramNameString.Length() - 1	{
						cc.WindowElements[ index ][ "Param" A_Index "_Name"] := Trim( paramNameString[ A_Index ] )
					}
				}else{
					Gui, +OwnDialogs
					MsgBox,,Error , The delimeter can't be set with the current loadout.`nA new delimeter needs to be added to the code.
				}
				
				if( !instr( paramExpressionModeString , "|" ) ){
					paramExpressionModeString := strReplace( paramExpressionModeString , "[p]" , "|"  )
					paramExpressionModeString := StrSplit( paramExpressionModeString , "|" , "|" )
					loop, % paramExpressionModeString.Length() - 1	{
						cc.WindowElements[ index ][ "Param" A_Index "_ExpressionMode"] := Trim( paramExpressionModeString[ A_Index ] )
					}
				}else{
					Gui, +OwnDialogs
					MsgBox,,Error , The delimeter can't be set with the current loadout.`nA new delimeter needs to be added to the code.
				}
				
			}
			
		}
		
	}
	Read_ProjectCodeInserts(){
		local project := This.SelectedProject
		local Dir := This.ProjectDir "\" project "\CodeInserts\" 
		local cc := This.Projects[ project ]
		local arr
		local fName
		cc.CodeInserts := {}
		cc.CodeInsertsArray := []
		Loop, Files , % Dir "\*.*"  , D
		{
			arr := StrSplit( A_LoopFileFullPath , "\" )
			fName := arr[ arr.Length() ]
			
			cc := This.Projects[ project ].CodeInserts[ fName ] := {}
			This.Projects[ project ].CodeInsertsArray.Push( cc )
			
			
			FileRead, CodeInsertNotes , % Dir "\" fName "\CodeInsertNotes.txt"
			FileRead, CodeInsertContents , % Dir "\" fName "\CodeInsertCode.ahk"
			FileRead, CodeInsertSection , % Dir "\" fName "\CodeInsertSection.Txt"
			;~ MsgBox, % CodeInsertContents
			cc.Index := This.Projects[ project ].CodeInsertsArray.Length()
			cc.CodeInsertName := fName
			cc.CodeInsertNotes := CodeInsertNotes
			cc.CodeInsertContents := CodeInsertContents
			cc.CodeInsertSection := CodeInsertSection
			cc.CodePath := Dir "\" fName "\CodeInsertCode.ahk"
			
			This.Projects[ project ].SelectedCodeInsert := cc.CodeInsertName
		}
		;~ cc.SelectedCodeInsert := fName
		;~ MsgBox, % fName
	}
	Read_ProjectFunctions(){
		local project := This.SelectedProject
		local Dir := This.ProjectDir "\" project "\Functions\" 
		local cc := This.Projects[ project ]
		local arr
		local fName
		cc.Functions := {}
		cc.FunctionsArray := []
		Loop, Files , % Dir "\*.*"  , D
		{
			arr := StrSplit( A_LoopFileFullPath , "\" )
			fName := arr[ arr.Length() ]
			
			cc := This.Projects[ project ].Functions[ fName ] := {}
			This.Projects[ project ].FunctionsArray.Push( cc )
			
			
			FileRead, FunctionNotes , % Dir "\" fName "\FunctionNotes.txt"
			FileRead, FunctionContents , % Dir "\" fName "\FunctionCode.ahk"
			;~ MsgBox, % FunctionContents
			cc.Index := This.Projects[ project ].FunctionsArray.Length()
			cc.FunctionName := fName
			cc.FunctionNotes := FunctionNotes
			cc.FunctionContents := FunctionContents
			cc.CodePath := Dir "\" fName "\FunctionCode.ahk"
			This.Projects[ project ].SelectedFunction := cc.FunctionName
		}
		;~ cc.SelectedFunction := fName
		;~ MsgBox, % fName
	}
	_Write_WindowData(){
		local project := This.SelectedProject
		local window := This.Projects[ project ].SelectedWindow
		local cc := This.Projects[ project ].Windows[ window ]
		local elementsObject := cc.WindowElements
		local path := A_ScriptDir "\ProjectsFolder\" project "\Windows\" window "\Window_ini_Data"
		local numberOfElements := elementsObject.Length()
		local map := This._Get_WindowElement_MethodMap( window , elementsObject )
		FileDelete, % path ".ini"
		IniWrite, % cc.WindowName , % path , WindowDetails , WindowName 
		IniWrite, % cc.WindowType , % path , WindowDetails , WindowType
		IniWrite, % cc.WindowOptions , % path , WindowDetails , WindowOptions
		IniWrite, % cc.WindowTitle , % path , WindowDetails , WindowTitle
		IniWrite, % cc.WindowDefaultsObjectString , % path , WindowDetails , WindowDefaultsObjectString
		IniWrite, % cc.WindowFunctionParams , % path , WindowDetails , WindowFunctionParams
		IniWrite, % numberOfElements , % path , WindowElementDetails , numberOfElements
		
		
		IniWrite, % cc.FolderPath , % path , WindowDetails , FolderPath
		IniWrite, % cc.iniPath , % path , WindowDetails , iniPath
		IniWrite, % cc.ScriptPath , % path , WindowDetails , ScriptPath
		IniWrite, % cc.TestScriptPath , % path , WindowDetails , TestScriptPath
		
		for k , v in elementsObject	{
			elementType := elementsObject[ k ].elementType
			IniWrite, % elementType , % path , WindowElement%k% , ElementType
			paramString := ""
			paramNameString := ""
			paramExpressionModeString := ""
			
			for i , j in map[ elementType ]	{
				if( instr( i , "Name" ) ){
					paramNameString .= elementsObject[ k ][ i ] " [p] " 
				}else if( instr( i , "ExpressionMode" ) ){
					paramExpressionModeString .= elementsObject[ k ][ i ] " [p] " 
				}else if( instr( i , "param" ) ){
					paramString 	.= elementsObject[ k ][ i ] " [p] " 
				}
			}
			IniWrite, % paramString , % path , WindowElement%k% , params
			IniWrite, % paramNameString , % path , WindowElement%k% , paramNames
			IniWrite, % paramExpressionModeString , % path , WindowElement%k% , paramExpressionModes
		}
		This._Write_WindowFunctionCode()
	}	
	_Write_CodeInsertData(){
		local project := This.SelectedProject
		local codeInsert := This.Projects[ project ].SelectedCodeInsert
		local cc := This.Projects[ project ].codeInserts[ codeInsert ]
		notesPath := This.ProjectDir "\" project "\CodeInserts\" codeInsert "\"
		
		;~ cc.FolderPath 		:= This.ProjectDir "\" project "\CodeInserts\" CodeInsertName 
		notesPath 		:= This.ProjectDir "\" project "\CodeInserts\" cc.CodeInsertName "\CodeInsertNotes.txt"
		codePath 		:= This.ProjectDir "\" project "\CodeInserts\" cc.CodeInsertName "\CodeInsertCode.ahk"
		sectionPath 	:= This.ProjectDir "\" project "\CodeInserts\" cc.CodeInsertName "\CodeInsertSection.Txt"
		cc.CodePath := codePath
		FileDelete, % notesPath
		FileDelete, % codePath
		FileDelete, % sectionPath
		FileAppend, % cc.CodeInsertNotes , % notesPath
		FileAppend, % cc.CodeInsertContents , % codePath
		FileAppend, % cc.CodeInsertSection , % sectionPath
		;~ MsgBox, % "selected insert: " codeInsert "`nNotes: " cc.CodeInsertNotes
		;~ This._Write_WindowFunctionCode()
	}
	_Write_FunctionData(){
		local project := This.SelectedProject
		local Function := This.Projects[ project ].SelectedFunction
		local cc := This.Projects[ project ].Functions[ Function ]
		;~ notesPath := This.ProjectDir "\" project "\Functions\" Function "\"
		
		;~ cc.FolderPath 		:= This.ProjectDir "\" project "\Functions\" FunctionName 
		notesPath 		:= This.ProjectDir "\" project "\Functions\" cc.FunctionName "\FunctionNotes.txt"
		codePath 		:= This.ProjectDir "\" project "\Functions\" cc.FunctionName "\FunctionCode.ahk"
		cc.CodePath := codePath
		FileDelete, % notesPath
		FileDelete, % codePath
		FileAppend, % cc.FunctionNotes , % notesPath
		FileAppend, % cc.FunctionContents , % codePath
		;~ MsgBox, % "selected insert: " Function "`nNotes: " cc.FunctionNotes
		;~ This._Write_WindowFunctionCode()
	}
	_Write_WindowElement_To_ini( element ){
		local project := This.SelectedProject
		local window := This.Projects[ project ].SelectedWindow
		local path := A_ScriptDir "\ProjectsFolder\" project "\Windows\" window "\Window_ini_Data"
		
		local elementIndex := element.Index
		local elementType := element.ElementType
		
		local map := This._Get_WindowElement_MethodMap( window )
		;~ MsgBox, % elementIndex "`n" elementType
		IniWrite, % elementType , % path , WindowElement%elementIndex% , ElementType
		paramString := ""
		paramNameString := ""
		for i , j in map[ elementType ]	{
			if( instr( i , "Name" ) ){
				paramNameString .= element[ i ] " [p] " 
			}else if( instr( i , "param" ) ){
				paramString 	.= element[ i ] " [p] " 
			}
		}
		IniWrite, % paramString , % path , WindowElement%elementIndex% , params
		IniWrite, % paramNameString , % path , WindowElement%elementIndex% , paramNames
		ToolTip, % "ElementSaved"
		SetTimer, ToolTipsOff, -1500
	}
	_Write_WindowFunctionCode(){
		local project := This.SelectedProject
		local elements := This.Get_WindowElements()
		local window := This.Get_Window()
		local outputString := ""
		local winObject := This.Projects[ project ].Windows[ window ]
		local path := winObject.ScriptPath 
		
		outputString .= ";~ " window " := " window "Constructor( " winObject.WindowFunctionParams " )`n`n"
		
		outputString .= window "Constructor( " winObject.WindowFunctionParams " ){`n"
		outputString .= "`tlocal " window "`n"
		;~ SoundBeep
		;~ SoundBeep
		;~ ToolTip, % "Tip:`n" elements.Length()
		;~ MsgBox, % winObject.WindowDefaultsObjectString
		;~ outputString .= "`t" window " := New PopUpWindow_V3( " """" winObject.WindowOptions """" " , " """" winObject.WindowTitle """" " , " """" winObject.WindowType """" " , " ( ( winObject.DefaultsObject ) ? ( winObject.DefaultsObject ) : ( """""" ) ) " )`n"
		outputString .= "`t" window " := New PopUpWindow_V3( " """" winObject.WindowOptions """" " , " """" winObject.WindowTitle """" " , " """" winObject.WindowType """" " , " ( ( winObject.WindowDefaultsObjectString ) ? ( winObject.WindowDefaultsObjectString ) : ( """""" ) ) " )`n"
		for k , v in elements	{
			cc := elements[ k ]
			elementMap := This[ "GetMap_" cc.ElementType ]( window , cc )
			outputString .= "`t" elementMap.Output	"`n"		
		}
		outputString .= "`treturn " window "`n"
		outputString .= "}`n"
		
		FileDelete, % path 
		sleep, 100
		FileAppend, % outputString , % path
		;~ MsgBox, % path
	}
	_Write_TestWindow( makeChild := 0 ){
		local project := This.SelectedProject
		local elements := This.Get_WindowElements()
		local window := This.Get_Window()
		local outputString := ""
		local winObject := This.Projects[ project ].Windows[ window ]
		local path := A_ScriptDir "\ProjectsFolder\" project "\Windows\" window "\Window_TestScript.ahk"
		;~ #Include <GDIP_ALL> ;GDIP:  https://www.autohotkey.com/boards/viewtopic.php?f=6&t=6517
		;~ MsgBox, % makeChild
		outputString .= "#Include <GDIP_ALL> `;GDIP:  https://www.autohotkey.com/boards/viewtopic.php?f=6&t=6517`n"
		outputString .= "#Include <PopUpWindow_V3> `;At the bottom of the script `n"
		outputString .= "#SingleInstance Force`n"
		outputString .= "GDIP_Startup()`n"
		
		outputString .= window " := " window "Constructor( " winObject.WindowFunctionParams " )`n`n"
		
		outputString .= "OnMessage( 0x201 , Func( ""Move____Window"" ).Bind( window ) )`n`n"
		
		outputString .= "return`n`n"
		outputString .= "GuiClose:`n"
		outputString .= "GuiContextMenu:`n"
		outputString .= "*ESC::ExitApp`n`n`n"
		
		outputString .= "Move____Window( window ){`n"
		outputString .= "`tif( GetKeyState( ""Shift"" ) )`n"
		outputString .= "`t`tPostMessage, 0xA1 , 2`n"
		outputString .= "}`n"
		
		outputString .= window "Constructor( " winObject.WindowFunctionParams " ){`n"
		outputString .= "`tlocal " window "`n"
		
		if( makeChild ){
			;~ outputString .= "`t" window " := New PopUpWindow_V3( " """" winObject.WindowOptions " +LastFound """ " , " """" winObject.WindowTitle """" " , " """" winObject.WindowType """" " , " ( ( winObject.WindowDefaultsObjectString ) ? ( winObject.WindowDefaultsObjectString ) : ( """""" ) ) " )`n"
			;~ outputString .= "`t" window " := New PopUpWindow_V3( " """" winObject.WindowOptions " +LastFound """ " , " """" winObject.WindowTitle """" " , " """" winObject.WindowType """" " , " ( ( winObject.WindowDefaultsObjectString ) ? ( winObject.WindowDefaultsObjectString ) : ( """""" ) ) " , " ( ( winObject.WindowFunctionParams ) ? ( winObject.WindowFunctionParams ) : ( """""" ) ) " )`n"
			outputString .= "`t" window " := New PopUpWindow_V3( " """" winObject.WindowOptions " +LastFound """ " , " """" winObject.WindowTitle """" " , " """" winObject.WindowType """" " , " ( ( winObject.WindowDefaultsObjectString ) ? ( winObject.WindowDefaultsObjectString ) : ( """""" ) ) " , " ( ( winObject.WindowFunctionParams ) ? ( winObject.WindowFunctionParams ) : ( """""" ) ) " )`n"
			outputString .= "`tDllCall( ""SetParent"" , ""uint"" , WinExist() , ""uint"" , " This.MainInnerWindow.Hwnd " )`n"
			;~ MsgBox, % makeChild
		}else{
			outputString .= "`t" window " := New PopUpWindow_V3( " """" winObject.WindowOptions """" " , " """" winObject.WindowTitle """" " , " """" winObject.WindowType """" " , " ( ( winObject.WindowDefaultsObjectString ) ? ( winObject.WindowDefaultsObjectString ) : ( """""" ) ) " , " ( ( winObject.WindowFunctionParams ) ? ( winObject.WindowFunctionParams ) : ( """""" ) ) " )`n"
		}
		for k , v in elements	{
			cc := elements[ k ]
			elementMap := This[ "GetMap_" cc.ElementType ]( window , cc )
			outputString .= "`t" elementMap.Test_Output	"`n"		
		}
		outputString .= "`treturn " window "`n"
		outputString .= "}`n"
		
		FileDelete, % path 
		sleep, 100
		FileAppend, % outputString , % path
		sleep, 100
		Try{
			Run, % path
		}Catch{
			Gui, +OwnDialogs
			MsgBox,,Error,There was an error trying to run the test script
		}
	}
	Open_WindowInEditor(){
		local project := This.SelectedProject 
		local window := This.Get_Window()
		Try{
			Run, % "Edit " This.Projects[ project ].Windows[ window ].ScriptPath
		}catch{
			Gui, +OwnDialogs
			MsgBox, ,Error, An error occured when trying to open the window script.
		}
	}
	Write_Script( SaveAs := "" ){
		local project := This.SelectedProject
		;~ local
		;~ local
		;~ local
		local path := This.ProjectDir "\" project "\Script Folder\" project "_OutputScript.ahk"  
		local scriptElements := This.Projects[ project ].ScriptElements
		local outputScriptString := ""
		local windowFunctionOutput := ""
		local window
		ToolTip, Writing the script
		if( SaveAs )
			path := SaveAs
		for k , v in scriptElements	{
			
			cc := scriptElements[ k ]
			
			if( cc.Type = "Code Insert" ){
				codeInsert := This.Projects[ project ].CodeInserts[ cc.Name ].CodeInsertContents
				outputScriptString .= ";$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$`n"
				outputScriptString .= ";CodeInsert: " cc.Name "`n"
				outputScriptString .= ";$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$`n"
				outputScriptString .= codeInsert "`n"
				
				;~ MsgBox, % SubStr( outputScriptString , 1 , 500 )
			}else if( cc.Type = "Window Function Insert" ){
				
				
				window := This.Projects[ project ].Windows[ cc.Name ]
				if( window = "" ){
					MsgBox, 262192, Missing window, % "The window doesn't seem to exist.`n" cc.Name
				}
				
				
				FileRead, windowFunctionOutput , % window.ScriptPath
				if( windowFunctionOutput = "" )
					loop, 3
						SoundBeep, 999
				outputScriptString .= ";############################################`n"
				outputScriptString .= ";Window Constructor Function For Window: " cc.Name "`n"
				outputScriptString .= ";############################################`n"
				outputScriptString .= windowFunctionOutput "`n"
				;~ MsgBox, % SubStr( outputScriptString , 1 , 500 )
			}else if( cc.Type = "Function Insert" ){
				
				
				function := This.Projects[ project ].Functions[ cc.Name ]
				if( function = "" ){
					MsgBox, 262192, Missing window, % "The Function doesn't seem to exist.`n" cc.Name
				}
				
				codePath := This.ProjectDir "\" project "\Functions\" cc.Name "\FunctionCode.ahk"
				FileRead, functionCode , % codePath
				if( functionCode = "" )
					loop, 3
						SoundBeep, 999
				
				outputScriptString .= ";%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`n"
				outputScriptString .= ";Function Name: " cc.Name "`n"
				outputScriptString .= ";%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`n"
				outputScriptString .= functionCode "`n"
				;~ MsgBox, % SubStr( outputScriptString , 1 , 500 )
			}
			
			;~ msgbox, % "Name: " cc.Name "`nType: " cc.Type
			
		}
		
		IfExist, % path
			FileDelete, % path 
		sleep, 30
		FileAppend, % outputScriptString , % path
		ToolTip, Done
		sleep, 300
		ToolTip
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ClassElementTabEvents extends CodeInsertTabEvents	{
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class CodeInsertTabEvents extends BitmapElementTabEvents	{
	
	Add_New_CodeInsert(){
		
		local project := This.SelectedProject
		local tempwin
		
		if( project = "" ){
			SoundBeep
			SoundBeep
			MsgBox, 262144, No Project Selected, Load or create a new project first
			return
		}
		if( !This.SelectedProject ){
			return
		}
		tempwin := New NewCodeInsertWindowclass()
		This.ProjectsMainWindow.SetDisabled()
		This.ElementsMainWindow.SetDisabled()
		sleep, 100
		Gui, % tempwin.NewCodeInsertWindow.Hwnd ":Show", NA
		
		WinWaitClose, % "ahk_id " tempwin.NewCodeInsertWindow.Hwnd
		This.ProjectsMainWindow.SetEnabled()
		This.ElementsMainWindow.SetEnabled()
		This.Update_Details_CodeInsertTab()
		
		
		;~ local tempwin := New NewCodeInsertWindowclass()
		;~ This.ProjectsMainWindow.SetDisabled()
		;~ This.ElementsMainWindow.SetDisabled()
		;~ WinWaitClose, % "ahk_id " tempwin.NewCodeInsertWindow.Hwnd
		;~ This.ProjectsMainWindow.SetEnabled()
		;~ This.ElementsMainWindow.SetEnabled()
		;~ This.Update_Details_CodeInsertTab()
	}
	Update_Details_CodeInsertTab(){
		local project := This.SelectedProject
		local CodeInsert := This.Projects[ project ].SelectedCodeInsert
		local cc := This.Projects[ project ].CodeInserts[ CodeInsert ]
		;~ local element := This.Projects[ project ].Windows[ window ].SelectedWindowElement
		
		;~ if( !project || !CodeInsert || !isObject( cc ) ){
			;~ loop, 3
				;~ SoundBeep 999
			;~ return
		;~ }
		
		This.CodeInsertssReadyForInput := 0
		ciList := []
		sIndex := ""
		for k , v in This.Projects[ project ].CodeInserts	{
			ciList.Push( k )
			if( k = CodeInsert )
				sIndex := A_Index
		}
		;~ MsgBox, % "length: " ciList.Length() "`nitem 1" ciList[ 1 ]
		
		;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
		;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
		;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
		;~ This.CodeInsertTab.SetControlList( This.CodeInsertTab.Controls.CodeInsertListbox , ciList , sIndex )
		
		
		
		;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		This.CodeInsertTab.Set( This.CodeInsertTab.Controls.Param1Edit ,, cc.CodeInsertName )
		This.CodeInsertTab.Set( This.CodeInsertTab.Controls.Param2Edit ,, cc.CodeInsertNotes )
		This.CodeInsertTab.Set( This.CodeInsertTab.Controls.Param3Edit ,, cc.CodeInsertContents )
		
		This.Set_SelectedCodeInsert_Section()
		;~ This.CodeInsertTab.Set( This.CodeInsertTab.Controls.SectionDDL , "Choose" , cc.CodeInsertSection )
		This.CodeInsertTab.Set( This.CodeInsertTab.Controls.CodeInsertListbox , "Choose" , cc.CodeInsertName )
		This.CodeInsertTab.Set( This.CodeInsertTab.Controls.SectionDDL , "Choose" , cc.CodeInsertSection )
		;~ This.Set_ListViewControl_List()
		;~ This.Set_WindowElements_ParamControls()
		;~ sleep, 100
		;~ This.WindowElementsReadyForInput := 1
	}
	Set_SelectedCodeInsert(){
		local project := This.SelectedProject
		local cc := This.CodeInsertTab
		This.Projects[ project ].SelectedCodeInsert := cc.Get( cc.Controls.CodeInsertListbox )
		
		This.Set_SelectedCodeInsert_Section()
		
		This.Update_Details_CodeInsertTab()
		;~ This.Set_SelectedCodeInsert_Section()
		;~ This.Update_Details_CodeInsertTab()
	}
	Submit_ParamEdit_Values(){
		local project := This.SelectedProject
		local codeInsert := This.Projects[ project ].SelectedCodeInsert
		local cc := This.Projects[ project ].CodeInserts[ codeInsert ]
		;~ local elementIndex := This.Get_WindowElement()
		;~ if( !This.WindowElementsReadyForInput || !IsObject( cc ) )
			;~ return
		local name := StrReplace( This.CodeInsertTab.Get( This.CodeInsertTab.Controls[ "Param1Edit" ] ) , " " , "_" )
		local notes := This.CodeInsertTab.Get( This.CodeInsertTab.Controls[ "Param2Edit" ] )
		local contents := This.CodeInsertTab.Get( This.CodeInsertTab.Controls[ "Param3Edit" ] )	
		local section := This.CodeInsertTab.Get( This.CodeInsertTab.Controls[ "SectionDDL" ] )	
		local path := This.ProjectDir "\" project "\CodeInserts\" codeInsert "\"
		;~ cc.CodeInsertName := This.CodeInsertTab.Get( This.CodeInsertTab.Controls[ "Param1Edit" ] )	
		;~ cc.CodeInsertNotes := This.CodeInsertTab.Get( This.CodeInsertTab.Controls[ "Param2Edit" ] )	
		;~ cc.CodeInsertContents := This.CodeInsertTab.Get( This.CodeInsertTab.Controls[ "Param3Edit" ] )	
		if( name != cc.CodeInsertName ){
			
			
			This._RemoveDirectory( path )
			
			This.Projects[ project ].CodeInsertsArray.RemoveAt( cc.Index )
			This._Delete_CodeInsert()
			This.Projects[ project ].SelectedCodeInsert := name
			;~ This.Projects[ project ].CodeInserts.Remove( codeInsert )
			This.Add_CodeInsert( name , notes , contents , section )
			This.Update_Details_CodeInsertTab()
			;~ dd.CodeInsertName := name
			;~ dd.CodeInsertNotes := notes
			;~ dd.CodeInsertContents := contents
			;~ This.Projects[ project ].SelectedCodeInsert := name
		}
		cc.CodeInsertNotes := notes
		cc.CodeInsertContents := contents
		cc.CodeInsertSection := section
		
		;~ MsgBox, % "name: " name
		
		
		;~ This.Set_SelectedCodeInsert()
		This._Write_CodeInsertData()
		SoundBeep
		;~ cc[ "Param" paramIndex ] := This.WindowElementTab.Get( This.WindowElementTab.Controls[ "Param" paramIndex "Edit" ] )
		;~ LV_Modify( This.WindowElementSlectedListViewRow ,, elementIndex , cc.ElementType , cc.Param1 , cc.Param2 , cc.Param3 , cc.Param4 , cc.Param5 , cc.Param6 , cc.Param7 , cc.Param8 , cc.Param9 , cc.Param10 , cc.Param11 )
		;~ This._Write_WindowElement_To_ini( cc )	
	}
	Set_SelectedCodeInsert_Section(){
		
		local selected := This.CodeInsertTab.Get( This.CodeInsertTab.Controls.SectionNameDDL )
		SoundBeep
		;~ MsgBox, % selected
		
		project := This.SelectedProject
		
		CodeInserts := This.Projects[ project ].CodeInserts
		outList := "|"
		for k , v in CodeInserts	{
			
			cc := CodeInserts[ k ]
			if( cc.CodeInsertSection = selected ){
				outList .= cc.CodeInsertName "|"
			}else if( selected = "All" ){
				outList .= cc.CodeInsertName "|"
			}
			
			
		}
		This.CodeInsertTab.Set( This.CodeInsertTab.Controls.CodeInsertListbox ,, outList )
		;~ This.Update_Details_CodeInsertTab()
	}
	Open_In_NotePad( mode := "" ){
		local project := This.SelectedProject
		local insert := This.Projects[ project ].SelectedCodeInsert
		local string := ""
		codePath := This.Projects[ project ].CodeInserts[ insert ].CodePath
		if( codePath ){
			try{
				if( mode = "edit" )
					Run % "Edit " CodePath 
				else
					Run % "notepad.exe " CodePath 
				;~ Run % "Edit " CodePath 
				ToolTip, running
				sleep, 500
				ToolTip
				;~ run, % "Edit " codePath
			}catch{
				Gui, +OwnDialogs
				MsgBox, Failed to open
			}
		}
		;~ MsgBox, % "CodePath: " CodePath
		
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class BitmapElementTabEvents extends WindowElementTabEvents	{
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class WindowElementTabEvents extends ScriptTabEvents	{
	
	Add_New_WindowElement(){
		local elementType := This.WindowElementTab.Get( This.WindowElementTab.Controls.ElementDDL )
		local startFresh := 0
		if( !elementType )
			return
		if( elementType = "CodeInsert" ){
			;~ SoundBeep
			;~ SoundBeep
			;~ SoundBeep
			
		}
		startFresh := This.WindowElementTab.Get( This.WindowElementTab.Controls.AutoClearDefaultsCheckbox )
		;~ MsgBox, % startFresh
		This.Add_WindowElement( elementType , startFresh )
		This.Update_Details_WindowElementTab()
	}
	Update_Details_WindowElementTab(){
		local project := This.SelectedProject
		local window := This.Projects[ project ].SelectedWindow
		local cc := This.Projects[ project ].Windows[ window ]
		local element := This.Projects[ project ].Windows[ window ].SelectedWindowElement
		if( !project || !window || !isObject( cc ) || !element ){
			loop, 3
				SoundBeep 999
			return
		}
		This.WindowElementsReadyForInput := 0
		if( cc.WindowType = "NormalWindow" ){
			This.WindowElementTab.SetControlList( This.WindowElementTab.Controls.ElementDDL , This.WindowElementTypeList_NormalWindow , 1 )
		}else{
			This.WindowElementTab.SetControlList( This.WindowElementTab.Controls.ElementDDL , This.WindowElementTypeList_LayeredWindow , 1 )
		}
		
		This.Set_ListViewControl_List()
		This.Set_WindowElements_ParamControls()
		sleep, 100
		This.WindowElementsReadyForInput := 1
	}
	Set_WindowElements_ParamControls(){
		local window := This.Get_Window()
		local element := This.Get_WindowElement()
		local cc := This.Projects[ This.SelectedProject ].Windows[ window ].WindowElements[ element ]
		local dd := This.WindowElementTab.Controls 
		GuiControlGet, focused_Control , % This.WindowElementTab.Hwnd ":Focus"
		if( inStr( focused_Control , "Edit" ) )
			return
		This.WindowElementsReadyForInput := 0
		map := This[ "GetMap_" cc.ElementType ]( window , cc )
		This.WindowElementTab.Set( dd.OutputStringText ,, "`t" map.Output )
		loop, 11	{
			if( A_Index = 1 && cc[ "Param" A_Index "_Name" ] )
				value := "++   " cc[ "Param" A_Index "_Name" ]
			else if( A_Index = 4 && cc.ElementType = "Add" )
				value := "++   " cc[ "Param" A_Index "_Name" ]
			else 
				value := cc[ "Param" A_Index "_Name" ]
			This.WindowElementTab.Set( dd[ "Param" A_Index "Text" ] ,, value )
			This.WindowElementTab.Set( dd[ "Param" A_Index "Edit" ] ,, cc[ "Param" A_Index ] )
			This.WindowElementTab.Set( dd[ "Param" A_Index "Checkbox" ] ,, cc[ "Param" A_Index "_ExpressionMode" ] )
		}
		sleep 100
		This.WindowElementsReadyForInput := 1
	}
	Set_SelectedWindowElement(){
		local project := This.SelectedProject
		local window := This.Projects[ project ].SelectedWindow
		if( A_GuiEvent = "I" && !This.BusyAddingElement ){
			Gui, % This.WindowElementTab.Hwnd ":Default"
			Gui, ListView , WindowElementsListView
			LV_GetText( selectedWindowElement , This.WindowElementSlectedListViewRow := LV_GetNext( 0 , "Focused" )  , 1 )
			This.Projects[ project ].Windows[ window ].SelectedWindowElement := selectedWindowElement
			
			This.Set_WindowElements_ParamControls()
		}
		return 1
	}
	Set_ListViewControl_List(){
		local project := This.SelectedProject
		local window := This.Projects[ project ].SelectedWindow
		local elements := This.Projects[ project ].Windows[ window ].WindowElements
		Gui, % This.WindowElementTab.Hwnd ":Default"
		Gui, ListView , WindowElementsListView
		GuiControl, % This.WindowElementTab.Hwnd ":-ReDraw" , WindowElementsListView
		LV_Delete()
		selectedElement := This.Get_WindowElement()
		This.BusyAddingElement := 1
		if( elements.Length() ){
			for k , v in elements	{
				cc := elements[ k ]
				if( A_Index = selectedElement ){
					LV_Add( "Select" , A_Index , cc.ElementType , cc.Param1 , cc.Param2 , cc.Param3 , cc.Param4 , cc.Param5 , cc.Param6 , cc.Param7 , cc.Param8 , cc.Param9 , cc.Param10 , cc.Param11 )
				}else{
					LV_Add( "" , A_Index , cc.ElementType , cc.Param1 , cc.Param2 , cc.Param3 , cc.Param4 , cc.Param5 , cc.Param6 , cc.Param7 , cc.Param8 , cc.Param9 , cc.Param10 , cc.Param11 )
				}
			}
		}
		sleep , 100
		This.BusyAddingElement := 0
		GuiControl, % This.WindowElementTab.Hwnd ":+ReDraw" , WindowElementsListView
		return 1
	}
	Submit_ParamEdit_Value( paramIndex ){
		local cc := This.Get_WindowElement_Object()
		local elementIndex := This.Get_WindowElement()
		if( !This.WindowElementsReadyForInput || !IsObject( cc ) )
			return
		cc[ "Param" paramIndex ] := This.WindowElementTab.Get( This.WindowElementTab.Controls[ "Param" paramIndex "Edit" ] )
		Gui, % This.WindowElementTab.Hwnd ":Default"
		Gui, ListView , WindowElementsListView
		GuiControl, % This.WindowElementTab.Hwnd ":-ReDraw" , WindowElementsListView
		LV_Modify( This.WindowElementSlectedListViewRow ,, elementIndex , cc.ElementType , cc.Param1 , cc.Param2 , cc.Param3 , cc.Param4 , cc.Param5 , cc.Param6 , cc.Param7 , cc.Param8 , cc.Param9 , cc.Param10 , cc.Param11 )
		GuiControl, % This.WindowElementTab.Hwnd ":+ReDraw" , WindowElementsListView
		;~ This._Write_WindowElement_To_ini( cc )	
	}
	Move_WindowElement_Up(){
		local element := This.Get_WindowElement()
		if( element = 1 )
			return
		This.Move_WindowElement( element , 0 )
	}
	Move_WindowElement_Down(){
		local element := This.Get_WindowElement()
		local elements := This.Get_WindowElements()
		if( element = elements.Length() )
			return
		This.Move_WindowElement( element , 1 )
	}
	Move_WindowElement_ToTop(){
		local element := This.Get_WindowElement()
		local elements := This.Get_WindowElements()
		if( element = 1 )
			return
		This.Move_WindowElement( element ,, 1 )
	}
	Move_WindowElement_ToBottom(){
		local element := This.Get_WindowElement()
		local elements := This.Get_WindowElements()
		if( element = elements.Length() )
			return
		This.Move_WindowElement( element ,, elements.Length() )
	}
	Move_WindowElement_InsertAt(){
		local element 		:= This.Get_WindowElement()
		local elements 		:= This.Get_WindowElements()
		local newPosition 	:= This.WindowElementTab.Get( This.WindowElementTab.Controls.InsertAtEdit )
		if( !element || newPosition = "" )
			return
		if( newPosition <= 0 )
			newPosition := 1
		else if( newPosition >= elements.Length() )
			newPosition := elements.Length()
		This.Move_WindowElement( element ,, newPosition )
	}
	SaveWindowElements(){
		This._Write_WindowData()
		SoundBeep
	}
	RunTestWindow(){
		local makeChild := This.WindowTab.Get( This.WindowTab.Controls.MakeDemoWindowChildCheckBox )
		This._Write_WindowData()
		This._Write_TestWindow( makeChild )
	}
	SetExpressionMode( paramIndex ){
		local elements := This.Get_WindowElements()
		local element := This.Get_WindowElement()
		elements[ element ][ "Param" paramIndex "_ExpressionMode" ] := This.WindowElementTab.Get( This.WindowElementTab.Controls[ "Param" paramIndex "Checkbox" ] )
	}
	CopyWindowElement(){
		
		This.Copy_WindowElement( This.Get_WindowElement() )
		This.Update_Details_WindowElementTab()
	}
	DeleteWindowElement(){
		Gui, +OwnDialogs
		MsgBox, 262148, Delete WindowElement, Do you want to delete the selected Window Element?
		IfMsgBox, Yes
		{
			This.Delete_WindowElement()
		}
	}
	OpenWindowCodeInEditor(){
		
		This.Open_WindowInEditor()
	}
	ClipElementOutputString(){
		local window := This.Get_Window()
		local element := This.Get_WindowElement()
		local elements := This.Get_WindowElements()
		local cc := elements[ element ]
		local map := This[ "GetMap_" cc.ElementType ]( window , cc )
		Clipboard := map.Output
		Sleep, 30
		SoundBeep
	}
	ClipControlObjectName(){
		local window := This.Get_Window()
		local element := This.Get_WindowElement()
		local elements := This.Get_WindowElements()
		local cc := elements[ element ]
		if( !GetKeyState( "Shift" ) || cc.ElementType != "Add" )
			return
		Clipboard := window ".Controls." StrReplace( cc.Param4 , """" )
		Sleep, 30
		SoundBeep
	}
	ClipParam1(){
		if( !GetKeyState( "Shift" ) )
			return
		Clipboard := This.WindowElementTab.Get( This.WindowElementTab.Controls.Param1Edit )
		Sleep, 30
		SoundBeep
	}
	Set_Param2FromClipboard(){
		local out , arr
		local window := This.Get_Window()
		local element := This.Get_WindowElement()
		local elements := This.Get_WindowElements()
		local cc := elements[ element ]
		if( cc.ElementType != "CodeInsert" )
			return
		
		arr := StrSplit( Clipboard , "`n" , "`r`n" )
		loop, 10	{
			cc[ "Param" A_Index + 1 ] := Trim( arr[ A_Index ] )
		}
		
		;~ cc.Param2 := Clipboard
		This.Update_Details_WindowElementTab()
		;~ MsgBox, % "Length: " arr.Length()
	}
	ClipWindowFunction(){
		local output 
		local window := This.Get_Window()
		local windows := This.Projects[ This.SelectedProject ].Windows
		local cc := windows[ window ]
		FileRead, output , % cc.ScriptPath
		if( output = "" )
			loop, 3
				SoundBeep, 999
		Clipboard := output 
		Sleep, 30
		SoundBeep
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ScriptTabEvents extends LabelTabEvents	{
	
	Update_Details_ScriptTab(){
		local project := This.SelectedProject
		
		
		This.ScriptTab.Set( This.ScriptTab.Controls.Param1Edit ,, cc.ScriptName )
		This.ScriptTab.Set( This.ScriptTab.Controls.Param2Edit ,, cc.ScriptNotes )
		This.ScriptTab.Set( This.ScriptTab.Controls.Param3Edit ,, cc.ScriptContents )
		
		arr := ""
		for k , v in This.Projects[ project ].ScriptElements	{
			cc := This.Projects[ project ].ScriptElements[ k ]
			name := cc.Name
			type := cc.Type
			arr .= name "     :     " type "     |"
			;~ arr.Push( name "     |     " type "     " )
		}
		;~ MsgBox, % arr
		;~ This.ScriptTab.SetControlList( This.ScriptTab.Controls.OutputListbox , arr , 1 )
		
		;~ This.Set_ListViewControl_List()
		;~ This.Set_WindowElements_ParamControls()
		;~ sleep, 100
		;~ This.WindowElementsReadyForInput := 1
		
		This.Set_ListViewControl_List_ScriptListView()
	}
	Submit_InsertType(){
		local type := This.ScriptTab.Get( This.ScriptTab.Controls.ScriptInsertTypeListbox )
		local project := This.SelectedProject
		local codeInsert := ""
		if( type = "Code Insert"){
			InsertList := ""
			;codeInsert := This.Projects[ project ].SelectedCodeInsert
			for k , v in This.Projects[ project ].CodeInserts	{
				InsertList .= k "|"
			}
			This.ScriptTab.SetControlList( This.ScriptTab.Controls.AvailableScriptInsertsListbox , InsertList , 1 )
			ToolTip, 
			return
		}else if( type = "Window Function Insert"){
			InsertList := ""
			
			for k , v in This.Projects[ project ].Windows	{
				InsertList .= k "|"
			}
			This.ScriptTab.SetControlList( This.ScriptTab.Controls.AvailableScriptInsertsListbox , InsertList , 1 )
			ToolTip, 
			return
		}else if( type = "Window Call Insert"){
			InsertList := ""
			
			for k , v in This.Projects[ project ].Windows	{
				InsertList .= k "|"
			}
			This.ScriptTab.SetControlList( This.ScriptTab.Controls.AvailableScriptInsertsListbox , InsertList , 1 )
			ToolTip, 
			return
		}else if( type = "Function Insert"){
			InsertList := ""
			
			for k , v in This.Projects[ project ].Functions	{
				InsertList .= k "|"
			}
			This.ScriptTab.SetControlList( This.ScriptTab.Controls.AvailableScriptInsertsListbox , InsertList , 1 )
			ToolTip, 
			return
		}
		ToolTip, % "Tip:`n" type
		
	}
	Add_ScriptElement(){
		local project := This.SelectedProject
		local cc := This.Projects[ project ].ScriptElements
		local selectedElement := This.ScriptTab.Get( This.ScriptTab.Controls.AvailableScriptInsertsListbox )
		local elementType := This.ScriptTab.Get( This.ScriptTab.Controls.ScriptInsertTypeListbox )
		cc.Push( { Type: elementType , Name: selectedElement } )
		
		;~ MsgBox, % cc[ cc.Length() ].Name
		;~ MsgBox, % cc.Length() 
		SoundBeep
		This.Update_Details_ScriptTab()
	}
	Set_ListViewControl_List_ScriptListView(){
		local project := This.SelectedProject
		;~ local window := This.Projects[ project ].SelectedWindow
		local elements := This.Projects[ project ].ScriptElements
		
		;~ MsgBox, in it
		Gui, % This.ScriptTab.Hwnd ":Default"
		Gui, ListView , ScriptElementsListView
		GuiControl, % This.ScriptTab.Hwnd ":-ReDraw" , ScriptElementsListView
		LV_Delete()
		
		
		selectedElement := This.Projects[ project ].SelectedScriptElement
		
		
		This.BusyAddingElement := 1
		if( elements.Length() ){
			for k , v in elements	{
				cc := elements[ k ]
				if( A_Index = selectedElement ){
					LV_Add( "Select" , A_Index , cc.Name , cc.Type )
				}else{
					LV_Add( "" , A_Index , cc.Name , cc.Type )
				}
			}
		}
		sleep , 100
		GuiControl, % This.ScriptTab.Hwnd ":+ReDraw" , ScriptElementsListView
		This.BusyAddingElement := 0
		return 1
	}
	_Save_Script(){
		local project := This.SelectedProject
		
		if( project = "" ){
			SoundBeep
			SoundBeep
			return
		}
		ToolTip, writing script (via save button)
		This.Create_Script( iniOnly := 0 )
		This.Write_Script()
		ToolTip, done
		sleep, 300
		ToolTip
		SoundBeep
	}
	_Save_And_Run_Script(){
		local project := This.SelectedProject
		
		if( project = "" ){
			SoundBeep
			SoundBeep
			return
		}
		ToolTip, writing script (via save and run button)
		This.Create_Script( iniOnly := 0 )
		This.Write_Script()
		try	{
			run, % This.ProjectDir "\" project "\Script Folder\" project "_OutputScript.ahk"  
		}
		ToolTip, done
		sleep, 300
		ToolTip
		SoundBeep
	}
	RemoveScriptElement(){
		local project := This.SelectedProject
		local selectedElement := This.Projects[ project ].SelectedScriptElement
		static busy
		if( busy )
			return
		busy := 1
		if( project = "" || selectedElement = "" ){
			SoundBeep
			SoundBeep
			return
		}
		This.Projects[ project ].ScriptElements.RemoveAt( selectedElement )
		This.Create_Script( iniOnly := 1 )
		This.Update_Details_ScriptTab()
		busy := 0
		sleep, 300
		SoundBeep
	}
	Set_SelectedScriptElement(){
		local project := This.SelectedProject
		;~ local  := This.Projects[ project ].SelectedWindow
		if( A_GuiEvent = "I" && !This.BusyAddingElement ){
			
			Gui, % This.ScriptTab.Hwnd ":Default"
			Gui, ListView , ScriptElementsListView
			GuiControl, % This.ScriptTab.Hwnd ":-ReDraw" , ScriptElementsListView
			LV_GetText( selectedScriptElement , This.ScriptElementSlectedListViewRow := LV_GetNext( 0 , "Focused" )  , 1 )
			This.Projects[ project ].SelectedScriptElement := selectedScriptElement
			GuiControl, % This.ScriptTab.Hwnd ":+ReDraw" , ScriptElementsListView
			sleep, 30
			;~ ToolTip, % "Tip:`n" selectedScriptElement
			;~ This.Set_ScriptElements_ParamControls()
		}
		return 1
	}
	Move_ScriptElement( dir := "up" ){ ;up, down, top, bottom, insertAt
		local project := This.SelectedProject
		local selectedElement := This.Projects[ project ].SelectedScriptElement
		local temp := {}
		local path := This.ProjectDir "\" project "\Script Folder\"
		static busy
		if( busy )
			return
		busy := 1
		if( project = "" || selectedElement = "" ){
			SoundBeep
			SoundBeep
			return
		}
		ToolTip, Moving element %Dir%
		for k , v in This.Projects[ project ].ScriptElements[ selectedElement ]	{
			temp[ k ] := v
		}
		Gui, % This.ScriptTab.Hwnd ":Default"
		Gui, ListView , ScriptElementsListView
		GuiControl, % This.ScriptTab.Hwnd ":-ReDraw" , ScriptElementsListView
		if( dir = "up" ){
			
			if( selectedElement = 1 ){
				GuiControl, % This.ScriptTab.Hwnd ":+ReDraw" , ScriptElementsListView
				return
			}
			
			This.Projects[ project ].ScriptElements.RemoveAt( selectedElement )
			This.Projects[ project ].ScriptElements.InsertAt( selectedElement -1 , temp )
			This.Projects[ project ].SelectedScriptElement := selectedElement -1
			newElement := selectedElement -1
			
		}else if( dir = "down" ){
			if( selectedElement >= This.Projects[ project ].ScriptElements.Length() ){
				GuiControl, % This.ScriptTab.Hwnd ":+ReDraw" , ScriptElementsListView
				return
			}
			This.Projects[ project ].ScriptElements.RemoveAt( selectedElement )
			This.Projects[ project ].ScriptElements.InsertAt( selectedElement +1 , temp )
			This.Projects[ project ].SelectedScriptElement := selectedElement +1
			newElement := selectedElement +1
		}else if( dir = "Top" ){
			if( selectedElement = 1 ){
				GuiControl, % This.ScriptTab.Hwnd ":+ReDraw" , ScriptElementsListView
				return
			}
			This.Projects[ project ].ScriptElements.RemoveAt( selectedElement )
			This.Projects[ project ].ScriptElements.InsertAt( 1 , temp )
			This.Projects[ project ].SelectedScriptElement := 1
			newElement := 1
		}else if( dir = "Bottom" ){
			if( selectedElement >= ( len := This.Projects[ project ].ScriptElements.Length() ) ){
				GuiControl, % This.ScriptTab.Hwnd ":+ReDraw" , ScriptElementsListView
				return
			}
			This.Projects[ project ].ScriptElements.RemoveAt( selectedElement )
			This.Projects[ project ].ScriptElements.InsertAt( len , temp )
			This.Projects[ project ].SelectedScriptElement := len
			newElement := len
		}else if( dir = "InsertAt" ){
			insertValue := This.ScriptTab.Get( This.ScriptTab.Controls.InsertScriptElementAtEdit )
			if( selectedElement = insertValue ){
				GuiControl, % This.ScriptTab.Hwnd ":+ReDraw" , ScriptElementsListView
				return
			}else if( insertValue < 1 )
				insertValue := 1
			else if( insertValue > ( len := This.Projects[ project ].ScriptElements.Length() ) )
				insertValue := len
			This.Projects[ project ].ScriptElements.RemoveAt( selectedElement )
			This.Projects[ project ].ScriptElements.InsertAt( insertValue , temp )
			This.Projects[ project ].SelectedScriptElement := insertValue
			newElement := insertValue
		}
		This.Write_iniData_Script( path )
		This.Update_Details_ScriptTab()
			
		;~ Gui, % This.ScriptTab.Hwnd ":Default"
		;~ Gui, ListView , ScriptElementsListView
		;~ GuiControl, % This.ScriptTab.Hwnd ":-ReDraw" , ScriptElementsListView
		;~ LV_Modify( selectedElement -1 , "Select")
		LV_Modify( newElement , "Select")
			
		GuiControl, % This.ScriptTab.Hwnd ":+ReDraw" , ScriptElementsListView
		sleep 300
		busy := 0
		SoundBeep
	}
	Save_Script_As(){
		local project := This.SelectedProject
		static index := 0
		
		InputBox, ScriptName , Name Your Script , Give your script a name [* Don't add the ahk extention *]
		if( ScriptName ){
			
			FileSelectFolder, TargetFolder , ,
			if( TargetFolder ){
				path := TargetFolder "\" ScriptName ".ahk"
				This.Write_Script( path )
				MsgBox, % path
				Clipboard := path
				SoundBeep
				return
			}
			MsgBox, nadda
			return
		}else{
			MsgBox, nadda
			return
		}
		
		
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class LabelTabEvents extends FunctionTabEvents	{
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class FunctionTabEvents extends ClassTabEvents	{
	
	Add_NewFunction_DisplayWindow(){
		local project := This.SelectedProject
		local tempwin
		
		if( project = "" ){
			SoundBeep
			SoundBeep
			MsgBox, 262144, No Project Selected, Load or create a new project first
			return
		}
		tempwin := New NewFunctionWindowclass()
		This.ProjectsMainWindow.SetDisabled()
		This.ElementsMainWindow.SetDisabled()
		sleep, 100
		Gui, % tempwin.NewFunctionWindow.Hwnd ":Show", NA
		WinWaitClose, % "ahk_id " tempwin.NewFunctionWindow.Hwnd
		This.ProjectsMainWindow.SetEnabled()
		This.ElementsMainWindow.SetEnabled()
		This.Update_Details_FunctionTab()
	}	
	Update_Details_FunctionTab(){
		
		local project := This.SelectedProject
		local Function := This.Projects[ project ].SelectedFunction
		local cc := This.Projects[ project ].Functions[ Function ]
		
		This.FunctionssReadyForInput := 0
		ciList := []
		sIndex := ""
		
		for k , v in This.Projects[ project ].Functions	{
			ciList.Push( k )
			if( k = Function )
				sIndex := A_Index
		}
		
		This.FunctionTab.SetControlList( This.FunctionTab.Controls.FunctionListbox , ciList , sIndex )
		
		This.FunctionTab.Set( This.FunctionTab.Controls.Param1Edit ,, cc.FunctionName )
		This.FunctionTab.Set( This.FunctionTab.Controls.Param2Edit ,, cc.FunctionNotes )
		
		
		
		;|#####%%%%%<<<<<|>>>>>%%%%%#####|
		; Testing: Reading the contents of the function file every time a function is selected. Jan, 31st 2024
		;~ Gui, +OwnDialogs
		if( InStr( cc.CodePath , ".ahk" ) ){
			FileRead, contents, % cc.CodePath
			if( contents != "" ){
				cc.FunctionContents := contents
				;MsgBox, % "Contents:`n" cc.FunctionContents
			}
			
		}else{
			
			;MsgBox, no file
			ToolTip, No Function file
			sleep, 500
			ToolTip
			return
		}
		
		;|#####%%%%%<<<<<|>>>>>%%%%%#####|
		This.FunctionTab.Set( This.FunctionTab.Controls.Param3Edit ,, cc.FunctionContents )
		
		
		
		
		This.FunctionssReadyForInput := 1
		
	}	
	Set_SelectedFunction(){
		local project := This.SelectedProject
		local cc := This.FunctionTab
		This.Projects[ project ].SelectedFunction := cc.Get( cc.Controls.FunctionListbox )
		This.Update_Details_FunctionTab()
		;~ This.Update_Details_FunctionTab()
	}
	Submit_ParamEdit_Function_Values(){
		local project := This.SelectedProject
		local Function := This.Projects[ project ].SelectedFunction
		local cc := This.Projects[ project ].Functions[ Function ]
		;~ local elementIndex := This.Get_WindowElement()
		;~ if( !This.WindowElementsReadyForInput || !IsObject( cc ) )
			;~ return
		local name := StrReplace( This.FunctionTab.Get( This.FunctionTab.Controls[ "Param1Edit" ] ) , " " , "_" )
		local notes := This.FunctionTab.Get( This.FunctionTab.Controls[ "Param2Edit" ] )
		local contents := This.FunctionTab.Get( This.FunctionTab.Controls[ "Param3Edit" ] )	
		local path := This.ProjectDir "\" project "\Functions\" Function "\"
		;~ cc.FunctionName := This.FunctionTab.Get( This.FunctionTab.Controls[ "Param1Edit" ] )	
		;~ cc.FunctionNotes := This.FunctionTab.Get( This.FunctionTab.Controls[ "Param2Edit" ] )	
		;~ cc.FunctionContents := This.FunctionTab.Get( This.FunctionTab.Controls[ "Param3Edit" ] )	
		;~ SoundBeep
		;~ SoundBeep
		;~ SoundBeep
		;~ SoundBeep
		;~ SoundBeep
		if( name != cc.FunctionName ){
			
			
			This._RemoveDirectory( path )
			
			This.Projects[ project ].FunctionsArray.RemoveAt( cc.Index )
			This._Delete_Function()
			This.Projects[ project ].SelectedFunction := name
			;~ This.Projects[ project ].Functions.Remove( Function )
			This.Add_Function( name , notes , contents )
			This.Update_Details_FunctionTab()
			;~ dd.FunctionName := name
			;~ dd.FunctionNotes := notes
			;~ dd.FunctionContents := contents
			;~ This.Projects[ project ].SelectedFunction := name
		}
		cc.FunctionNotes := notes
		cc.FunctionContents := contents
		
		;~ MsgBox, % "name: " name
		
		
		;~ This.Set_SelectedFunction()
		This._Write_FunctionData()
		SoundBeep
		;~ cc[ "Param" paramIndex ] := This.WindowElementTab.Get( This.WindowElementTab.Controls[ "Param" paramIndex "Edit" ] )
		;~ LV_Modify( This.WindowElementSlectedListViewRow ,, elementIndex , cc.ElementType , cc.Param1 , cc.Param2 , cc.Param3 , cc.Param4 , cc.Param5 , cc.Param6 , cc.Param7 , cc.Param8 , cc.Param9 , cc.Param10 , cc.Param11 )
		;~ This._Write_WindowElement_To_ini( cc )	
	}
	Open_Function_In_NotePad( mode := "" ){
		local project := This.SelectedProject
		local function := This.Projects[ project ].SelectedFunction
		local string := ""
		codePath := This.Projects[ project ].Functions[ function ].CodePath
		;~ MsgBox, % codepath
		if( codePath ){
			try{
				if( mode = "edit" )
					Run % "Edit " CodePath 
				else
					Run % "notepad.exe " CodePath 
				;~ Run % "Edit " CodePath 
				ToolTip, running
				sleep, 500
				ToolTip
				;~ run, % "Edit " codePath
			}catch{
				Gui, +OwnDialogs
				MsgBox, Failed to open
			}
		}
		;~ MsgBox, % "CodePath: " CodePath
		
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ClassTabEvents extends BitmapTabEvents	{
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class BitmapTabEvents extends WindowTabEvents	{
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class WindowTabEvents extends ProjectTabEvents	{
	
	Update_Details_WindowTab(){
		local project := This.SelectedProject
		local window := This.Projects[ project ].SelectedWindow
		local cc := This.Projects[ project ].Windows[ window ]
		This.WindowTab.SetControlList( This.WindowTab.Controls.WindowsListBox , This.Get_WindowList() , cc.Index )
		This.WindowTab.Set( This.WindowTab.Controls.WindowNameEdit ,, cc.WindowName )
		This.WindowTab.Set( This.WindowTab.Controls.WindowOptionsEdit ,, cc.WindowOptions )
		This.WindowTab.Set( This.WindowTab.Controls.WindowTitleEdit ,, cc.WindowTitle )
		
		This.WindowTab.Set( This.WindowTab.Controls.WindowDefaultsEdit ,, cc.WindowDefaultsObjectString )
		This.WindowTab.Set( This.WindowTab.Controls.WindowFunctionParamsEdit ,, cc.WindowFunctionParams )
		
		
		;~ ToolTip, % "Tip:`n" cc.WindowType
		This.WindowTab.Set( This.WindowTab.Controls.WindowTypeDDL , "choose" , ( ( cc.WindowType = "LayeredWindow" ) ? ( 2 ) : ( 1 ) ) )
		;~ This.WindowTab.SetControlList( This.WindowTab.Controls.WindowTypeDDL , This.Get_WindowList() , cc.Index )
		;~ This.WindowTab.Set( This.WindowTab.Controls.WindowTypeDDL , "NormalWindow|LayeredWindow" , ( ( cc.WindowType = "Layered Window" ) ? ( 2 ) : ( 1 ) ) )
	}
	UpdateWindow(){
		This.Get_WindowControlValues()
		SoundBeep
	}
	Get_WindowControlValues(){
		local project := This.SelectedProject
		local window := This.Get_Window()
		local cc := This.WindowTab
		local dd := cc.Controls
		local win := This.Projects[ project ].Windows[ window ]
		local WindowType := cc.Get( dd.WindowTypeDDL )
		local WindowName := StrReplace( cc.Get( dd.WindowNameEdit ) , " " , "_" )
		local WindowOptions := cc.Get( dd.WindowOptionsEdit )
		local WindowTitle := cc.Get( dd.WindowTitleEdit )
		local WindowDefaultsObjectString := cc.Get( dd.WindowDefaultsEdit )
		local WindowFunctionParams := cc.Get( dd.WindowFunctionParamsEdit )
		local change := 0
		local tempWindow 
		MsgBox, % WindowFunctionParams
		if( !Window )
			return
		
		if( Window != WindowName ){
			MsgBox, % "not the same`n" win.FolderPath
			
			for k , v in This.Projects[ project ].Windows	{
				if( k = WindowName ){
					Gui, +OwnDialogs
					SoundBeep
					SoundBeep
					MsgBox, 262144, Error, There already is a window with that name.
					return
				}
			}
			This._Copy_Window( WindowName )
			This._RemoveDirectory( win.FolderPath )
			This.Projects[ project ].Windows.Remove( window )
			This.Projects[ project ].SelectedWindow := WindowName
			win := This.Projects[ project ].Windows[ WindowName ]
		}
		
		
		if( WindowType != win.WindowType ){
			Gui, +OwnDialogs
			MsgBox, 262196, Change Window Type, Changing the window type will cause all of the current window elements to be deleted.`nAre you sure you want to change the window type?
			
			IfMsgBox, Yes 
			{
				win.WindowElements := []
				change := 1
			}else{
				return
			}
			
			
		}
		
		win.WindowType 					:= WindowType
		win.WindowName 					:= WindowName
		win.WindowOptions 				:= WindowOptions
		win.WindowTitle 				:= WindowTitle
		win.WindowDefaultsObjectString 	:= WindowDefaultsObjectString
		win.WindowFunctionParams 		:= WindowFunctionParams
		
		This._Write_WindowData()
		if( change )
			This.Update_Details_WindowElementTab()
		This.Update_Details_WindowTab()
	}
	Add_NewWindow_DisplayWindow(){
		
		local project := This.SelectedProject
		local tempwin
		
		if( project = "" ){
			SoundBeep
			SoundBeep
			MsgBox, 262144, No Project Selected, Load or create a new project first
			return
		}
		if( !This.SelectedProject ){
			return
		}
		tempwin := New NewWindowWindowclass()
		This.ProjectsMainWindow.SetDisabled()
		This.ElementsMainWindow.SetDisabled()
		sleep, 100
		Gui, % tempwin.NewWindowWindow.Hwnd ":Show", NA
		
		WinWaitClose, % "ahk_id " tempwin.NewWindowWindow.Hwnd
		This.ProjectsMainWindow.SetEnabled()
		This.ElementsMainWindow.SetEnabled()
		This.Update_Details_WindowTab()
		This.Update_Details_WindowElementTab()
		This.Set_SelectedWindow()
		
	}
	Set_SelectedWindow(){
		local project := This.SelectedProject
		local cc := This.WindowTab
		This.Projects[ project ].SelectedWindow := cc.Get( cc.Controls.WindowsListBox )
		This.Update_Details_WindowTab()
		This.Update_Details_WindowElementTab()
	}
	DeleteWindow(){
		local window := This.Get_Window()
		if( window = "" )
			return
		Gui, +OwnDialogs
		MsgBox, 262148, Delete Window, Do you want to DELETE the selected window?
		IfMsgBox, Yes
		{
			This._Delete_Window()
		}
	}
	CopySelectedWindow(){
		local window := This.Get_Window()
		local NewName
		local windows := This.Projects[ This.SelectedProject ].Windows
		if( window = "" )
			return
		Gui, +OwnDialogs
		InputBox, NewName , Window Name , Give the window a new name.
		NewName := StrReplace( NewName , " " , "_" ) 
		for k , v in windows	{
			if( k = NewName ){
				Gui, +OwnDialogs
				MsgBox, 262192, Name Taken, That name is already taken. Try again.
				return
			}
		}
		This._Copy_Window( NewName )
	}
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ProjectTabEvents extends ElementsInnerWindowEvents	{
	
	Add_NewProject_DisplayWindow(){
		
		local project := This.SelectedProject
		local tempwin
		
		;~ if( project = "" ){
			;~ SoundBeep
			;~ SoundBeep
			;~ MsgBox, 262144, No Project Selected, Load or create a new project first
			;~ return
		;~ }
		;~ if( !This.SelectedProject ){
			;~ return
		;~ }
		tempwin := New NewProjectWindowclass()
		This.ProjectsMainWindow.SetDisabled()
		This.ElementsMainWindow.SetDisabled()
		sleep, 100
		Gui, % tempwin.NewProjectWindow.Hwnd ":Show", NA
		
		WinWaitClose, % "ahk_id " tempwin.NewProjectWindow.Hwnd
		This.ProjectsMainWindow.SetEnabled()
		This.ElementsMainWindow.SetEnabled()
		This.Update_Details_ProjectTab()
		
		
		;~ local tempwin := New NewProjectWindowclass()
		;~ This.ProjectsMainWindow.SetDisabled()
		;~ This.ElementsMainWindow.SetDisabled()
		;~ WinWaitClose, % "ahk_id " tempwin.NewProjectWindow.Hwnd
		;~ This.ProjectsMainWindow.SetEnabled()
		;~ This.ElementsMainWindow.SetEnabled()
		;~ This.Update_Details_ProjectTab()
	}
	Load_Project_DisplayWindow(){
		local tempwin := New LoadProjectWindowClass()
		This.ProjectsMainWindow.SetDisabled()
		This.ElementsMainWindow.SetDisabled()
		WinWaitClose, % "ahk_id " tempwin.LoadProjectWindow.Hwnd
		This.ProjectsMainWindow.SetEnabled()
		This.ElementsMainWindow.SetEnabled()
		This.Update_Details_ProjectTab()
		;~ This.Update_Details_WindowTab()
	}
	Update_Details_ProjectTab(){
		local project := This.Projects[ This.SelectedProject ].Index
		This.ProjectTab.SetControlList( This.ProjectTab.Controls.ProjectsListBox , This.Get_ProjectList() , project )
		This.Update_Details_WindowTab()
		This.Update_Details_WindowElementTab()
	}
	Set_SelectedProject(){
		local cc := This.ProjectTab
		This.SelectedProject := cc.Get( cc.Controls.ProjectsListBox )
		This.Update_Details_ProjectTab()
		This.Update_Details_WindowElementTab()
		This.Update_Details_CodeInsertTab()
		This.Update_Details_FunctionTab()
	}
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ElementsInnerWindowEvents extends ElementsShellWindowEvents	{
	
	Set_Position_ElementsInnerWindow_Height(){
		local cc := This.ElementsInnerWindow
		;~ local dd := This.VaraibleTab
		;~ local dd := This.WindowElementTab
		local dd := This.CodeInsertTab
		local ym := cc.MarginY
		cc.H := dd.Y + dd.H + ym
		cc.Show()
	}
	Set_Focus_To_ElementPanel_Tab( tabname ){
		local cc := This.ElementsInnerWindow
		local dd := This[ tabname ]
		cc.Y := dd.Y * -1
		cc.Show()
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ElementsShellWindowEvents extends ElementsMainWindowEvents	{
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ElementsMainWindowEvents extends ProjectsInnerWindowEvents	{
	
	Set_Range_ElementsMainWindow_VertSlider(){
		local cc , range 
		cc := This.ElementsMainWindow.Controls.VertSlider
		range := 0 "-" This.ElementsInnerWindow.H - This.ElementsShellWindow.H 
		This.ElementsMainWindow.SetRange( cc , range )
	}
	Set_Range_ElementsMainWindow_HorzSlider(){
		local cc , range 
		cc := This.ElementsMainWindow.Controls.HorzSlider
		range := 0 "-" This.ElementsInnerWindow.W - This.ElementsShellWindow.W 
		This.ElementsMainWindow.SetRange( cc , range )
	}
	Set_ElementsMainWindow_Sliders(){
		This.Set_Range_ElementsMainWindow_VertSlider()
		This.Set_Range_ElementsMainWindow_HorzSlider()
	}
	Toggle_All_ElementsPanel_Tabs(){
		This.Set_All_TabPositions_ElementsPanel()
	}

}

;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class NewProjectWindowclass	extends PopUpWindow_Addons {
	
	__New(){
		local obj := {} , cc
		obj.W 				:= 639
		obj.X 				:= HB_BitmapMaker_v7.ProjectsMainWindow.X + 60
		obj.Y 				:= HB_BitmapMaker_v7.ProjectsMainWindow.Y + 90
		obj.H 				:= 750
		obj.MarginX 		:= 10
		obj.MarginY 		:= 3
		obj.Color 			:= "12161a"
		obj.ControlColor 	:= "32363a"
		obj.MinWidth		:= 190
		obj.MinHeight		:= 55
		obj.MaxWidth		:= obj.W
		obj.MaxHeight		:= obj.H
		obj.ToggleWidth		:= obj.MinWidth
		obj.ToggleHeight	:= obj.MinHeight
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		;~ cc := This.NewProjectWindow := New PopUpWindow_V3( "-DPIScale -Caption +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "New Project Window" ,, obj )
		cc := This.NewProjectWindow := New PopUpWindow_V3( "-DPIScale -Caption +Border +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "New Project Window" ,, obj )
		
		cc.Add( "Text" , "xm ym w380 h25 Center Border 0x200" , "New Project" , "MoveWindowButton" , This.PostMoveWindow.Bind( This , "NewProjectWindow" ) )
		cc.SetMargin( cc.MarginX , 10 )
		cc.Add( "Text" , "x+m yp w25 hp Center Border 0x200" , "X" ,, This.PostCloseWindow.Bind( This , "NewProjectWindow" ) )
		cc.SetFont( ,, "00FFFF" )
		
		cc.Add( "Text" , "xm y+m w300 hp Center Border 0x200 section " , "Existing Projects" )
		cc.Add( "ListBox" , "xm y+m w300 r15" ,, "ExistingProjectsListBox" )
		HB_BitmapMaker_v7.Get_ProjectFolder_List()
		cc.SetControlList( cc.Controls.ExistingProjectsListBox , HB_BitmapMaker_v7.ProjectFolderList )
		oSize := cc.FontSize
		cc.SetFont( , 33 , "00FF00" )
		cc.Add( "Text" , "x+m ys w100 h270 Center Border " , "`n+`nAdd" ,, This._AddProject.Bind( This ) )
		
		cc.SetFont( , oSize , "FFFF00" )
		cc.Add( "Text" , "xm y+m h25   0x200" , "Give the new project a name" )
		cc.Add( "Edit" , "x+10 w250 r1 " , "" , "ProjectNameEdit"  )
		cc.SetFont( ,18, "FF0000" )
		cc.Add( "Text" , "x+0 yp    0x200" , "*" )
		cc.Show( "AutoSize" )
		
	}
	_AddProject(){
		local cc := This.NewProjectWindow
		local projectName := cc.Get( cc.Controls.ProjectNameEdit )
		if( projectName = "" )
			return
		;~ MsgBox, % HB_BitmapMaker_v7.Check_ProjectFolder_List( projectName )
		if( HB_BitmapMaker_v7.Check_ProjectFolder_List( projectName ) ){
			Gui, +OwnDialogs
			MsgBox,, Project Name Taken , That name is already taken.
			return
		}
		HB_BitmapMaker_v7.Add_Project( projectName )
		This.NewProjectWindow := ""
	}
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class LoadProjectWindowClass extends PopUpWindow_Addons	{
	
	__New(){
		
		local obj := {} , cc
		obj.W 				:= 639
		;~ obj.X 				:= 130
		obj.X 				:= HB_BitmapMaker_v7.ProjectsMainWindow.X + 60
		obj.Y 				:= HB_BitmapMaker_v7.ProjectsMainWindow.Y + 90
		obj.H 				:= 750
		obj.MarginX 		:= 3
		obj.MarginY 		:= 3
		;~ obj.Color 			:= "12161a"
		obj.Color 			:= "660000"
		obj.ControlColor 	:= "32363a"
		obj.MinWidth		:= 190
		obj.MinHeight		:= 55
		obj.MaxWidth		:= obj.W
		obj.MaxHeight		:= obj.H
		obj.ToggleWidth		:= obj.MinWidth
		obj.ToggleHeight	:= obj.MinHeight
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		cc := This.LoadProjectWindow := New PopUpWindow_V3( "-DPIScale -Caption +Border +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "Load Project Window" ,, obj )
		
		cc.Add( "Text" , "xm ym w350 h25 Center 0x200 Border" , "Load Project Window" , "MoveWindowButton" , This.PostMoveWindow.Bind( This , "LoadProjectWindow" )  )
		cc.Add( "Text" , "x+m yp w25 hp Center 0x200 Border" , "X" , "CloseWindowButton" , This.PostCloseWindow.Bind( This , "LoadProjectWindow" ) )
		cc.Add( "ListBox" , "xm y+m w250 r15 section" ,, "ExistingProjectsListBox" )
		HB_BitmapMaker_v7.Get_ProjectFolder_List()
		;~ if(  )
		;~ MsgBox, % HB_BitmapMaker_v7.ProjectFolderList[ 1 ]
		cc.SetControlList( cc.Controls.ExistingProjectsListBox , HB_BitmapMaker_v7.ProjectFolderList , 1 )
		
		cc.Add( "Text" , "x+m ys w125 h50 Center 0x200 Border" , "Load Project" , "LoadProjectButton" , This._LoadProject.Bind( This ) )
		cc.Add( "Text" , "xp y+m wp h50 Center 0x200 Border" , "Delete Project" , "DeleteProjectButton" , This._DeleteProject.Bind( This ) )
		cc.Add( "Text" , "xp y+m wp h125 Center 0x200 Border" , "Cancel" , "CancelButton" , This._Cancel.Bind( This ) )
		cc.Show( "AutoSize" )
		
	}
	_LoadProject(){
		cc := This.LoadProjectWindow
		projectName := cc.Get( cc.Controls.ExistingProjectsListBox )
		HB_BitmapMaker_v7.Load_Project( projectName )
		This.LoadProjectWindow := ""
	}
	_DeleteProject(){
		
	}
	_Cancel(){
		
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class NewWindowWindowClass	extends PopUpWindow_Addons {
	
	__New(){
		local obj := {} , cc
		obj.W 				:= 639
		obj.X 				:= HB_BitmapMaker_v7.ProjectsMainWindow.X + 60
		obj.Y 				:= HB_BitmapMaker_v7.ProjectsMainWindow.Y + 90
		obj.H 				:= 750
		obj.MarginX 		:= 10
		obj.MarginY 		:= 3
		obj.Color 			:= "12161a"
		obj.ControlColor 	:= "32363a"
		obj.MinWidth		:= 190
		obj.MinHeight		:= 55
		obj.MaxWidth		:= obj.W
		obj.MaxHeight		:= obj.H
		obj.ToggleWidth		:= obj.MinWidth
		obj.ToggleHeight	:= obj.MinHeight
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		;~ cc := This.NewProjectWindow := New PopUpWindow_V3( "-DPIScale -Caption +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "New Project Window" ,, obj )
		cc := This.NewWindowWindow := New PopUpWindow_V3( "-DPIScale -Caption +Border +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "New Window Window" ,, obj )
		
		cc.Add( "Text" , "xm ym w580 h25 Center Border 0x200" , "New Window" , "MoveWindowButton" , This.PostMoveWindow.Bind( This , "NewWindowWindow" ) )
		cc.SetMargin( cc.MarginX , 10 )
		cc.Add( "Text" , "x+m yp w25 hp Center Border 0x200" , "X" ,, This.PostCloseWindow.Bind( This , "NewWindowWindow" ) )
		cc.SetMargin( 10 , 15 )
		;~ cc.SetFont( ,, "00FFFF" )
		cc.SetFont( ,, "00FF00" )
		cc.Add( "Text" , "xm y+m h25 w120  0x200" , "Window Name: " )
		cc.Add( "Edit" , "x+10 w470 r1 " , "" , "WindowNameEdit"  )
		cc.SetMargin( 10 , 5 )
		oFSize := cc.FontSize
		cc.SetFont( ,18, "FF0000" )
		cc.Add( "Text" , "x+0 yp    0x200" , "*" )
		cc.SetFont( , oFSize , "00FFFF" )
		cc.Add( "Text" , "xm y+m h25 w120 0x200" , "Window Type:" )
		cc.Add( "DDL" , "x+m yp w470 " , "NormalWindow||LayeredWindow" , "WindowTypeDDL" )
		cc.SetFont( ,, "FFFF00" )
		cc.Add( "Text" , "xm y+m h25 w120 0x200" , "Window Options:" )
		cc.Add( "Edit" , "x+10 w470 r1 " , "" , "WindowOptionsEdit"  )
		cc.SetFont( ,, "FF0000" )
		cc.Add( "Text" , "xm y+m h25 w120 0x200" , "Window Title:" )
		cc.Add( "Edit" , "x+10 w470 r1 " , "" , "WindowTitleEdit"  )
		cc.SetMargin( 10 , 15 )
		cc.SetFont( ,, "FFFFFF" )
		cc.Add( "Text" , "xm y+m w300 h30 Center 0x200 Border" , "Add Window" , "AddWindowButton" , This._AddWindow.Bind( This ) )
		cc.Add( "Text" , "x+m yp w300 h30 Center 0x200 Border" , "Cancel" , "CancelButton" , This.PostCloseWindow.Bind( This , "NewWindowWindow" ) )
		cc.Show( "AutoSize" )
		
	}
	_AddWindow(){
		local cc := This.NewWindowWindow
		local windowName := cc.Get( cc.Controls.WindowNameEdit )
		local windowType := cc.Get( cc.Controls.WindowTypeDDL )
		local windowOptions := cc.Get( cc.Controls.WindowOptionsEdit )
		local windowTitle := cc.Get( cc.Controls.WindowTitleEdit )
		local WindowDefaultsObjectString := ""
		local WindowFunctionParams := ""
		if( windowName = "" ){
			SoundBeep, 999
			SoundBeep, 999
			SoundBeep, 999
			return
		}
		windowName := strReplace( windowName , A_Space , "_" )
		if( HB_BitmapMaker_v7.Check_WindowList( windowName ) ){
			Gui, +OwnDialogs
			MsgBox,, Window Name Taken , That name is already taken.
			return
		}
		if( windowType = "LayeredWindow" ){
			WindowDefaultsObjectString := "{ AutoShow: 1 , X: ""Center"" , Y: ""Center"" , W: A_ScreenWidth / 2 , H: A_ScreenHeight / 2 , Color: ""22262a"" }"
		}
		HB_BitmapMaker_v7.Add_Window( StrReplace( windowName , " " , "_" )  , windowType , windowOptions , windowTitle , WindowDefaultsObjectString , WindowFunctionParams )
		
		This.NewWindowWindow := ""
	}
	
}

class NewCodeInsertWindowClass	extends PopUpWindow_Addons {
	
	__New(){
		local obj := {} , cc
		obj.W 				:= 639
		obj.X 				:= HB_BitmapMaker_v7.ElementsMainWindow.X + 60
		obj.Y 				:= HB_BitmapMaker_v7.ElementsMainWindow.Y + 90
		obj.H 				:= 750
		obj.MarginX 		:= 10
		obj.MarginY 		:= 3
		obj.Color 			:= "12161a"
		obj.ControlColor 	:= "32363a"
		obj.MinWidth		:= 190
		obj.MinHeight		:= 55
		obj.MaxWidth		:= obj.W
		obj.MaxHeight		:= obj.H
		obj.ToggleWidth		:= obj.MinWidth
		obj.ToggleHeight	:= obj.MinHeight
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		;~ cc := This.NewProjectWindow := New PopUpWindow_V3( "-DPIScale -Caption +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "New Project Window" ,, obj )
		cc := This.NewCodeInsertWindow := New PopUpWindow_V3( "-DPIScale -Caption +Border +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "New CodeInsert Window" ,, obj )
		
		
		
		
		cc.Add( "Text" , "xm ym w580 h25 Center Border 0x200" , "New Code Insert" , "MoveWindowButton" , This.PostMoveWindow.Bind( This , "NewCodeInsertWindow" ) )
		cc.SetMargin( cc.MarginX , 10 )
		cc.Add( "Text" , "x+m yp w25 hp Center Border 0x200" , "X" ,, This.PostCloseWindow.Bind( This , "NewCodeInsertWindow" ) )
		cc.SetMargin( 10 , 15 )
		;~ cc.SetFont( ,, "00FFFF" )
		
		
		
		cc.Add( "Text" , "xm y+m r3 w120 Center 0x200 Border" , "Section Name" , "SectionNameText" )
		cc.Add( "DDL" , "xp y+m wp" , "Section 1||Section 2|Section 3|Section 4|Gui Stuff|AutoExecute Stuff|Functions Stuff|" , "SectionNameDDL" )
		
		
		
		cc.SetFont( ,, "00FF00" )
		cc.Add( "Text" , "xm y+m h25 w120  0x200" , "Code Insert Name: " )
		cc.Add( "Edit" , "x+10 w470 r1 " , "" , "CodeInsertNameEdit"  )
		cc.SetMargin( 10 , 5 )
		
		cc.SetFont( ,, "FFFF00" )
		cc.Add( "Text" , "xm y+m h25 w120 0x200" , "Note:" )
		cc.Add( "Edit" , "x+10 w470 r3 " , "" , "CodeInsertNotesEdit"  )
		
		cc.SetFont( ,, "00FFFF" )
		cc.Add( "Text" , "xm y+m h25 w120 0x200" , "Contents:" )
		cc.Add( "Edit" , "x+10 w470 r9 +WantTab" , "" , "CodeInsertContentsEdit"  )
		
		cc.SetMargin( 10 , 15 )
		cc.SetFont( ,, "FFFFFF" )
		cc.Add( "Text" , "xm y+m w300 h30 Center 0x200 Border" , "Add Code Insert" , "AddCodeInsertButton" , This._AddCodeInsert.Bind( This ) )
		cc.Add( "Text" , "x+m yp w300 h30 Center 0x200 Border" , "Cancel" , "CancelButton" , This.PostCloseWindow.Bind( This , "NewCodeInsertWindow" ) )
		
		
		
		cc.Show( "AutoSize" )
		
	}
	_AddCodeInsert(){
		local cc := This.NewCodeInsertWindow
		local CodeInsertName := cc.Get( cc.Controls.CodeInsertNameEdit )
		local CodeInsertNotes := cc.Get( cc.Controls.CodeInsertNotesEdit )
		local CodeInsertContents := cc.Get( cc.Controls.CodeInsertContentsEdit )
		local CodeInsertSection := cc.Get( cc.Controls.SectionNameDDL )
		
		
		if( CodeInsertName = "" ){
			SoundBeep, 999
			SoundBeep, 999
			SoundBeep, 999
			return
		}
		CodeInsertName := strReplace( CodeInsertName , A_Space , "_" )
		if( HB_BitmapMaker_v7.Check_CodeInsertList( CodeInsertName ) ){
			Gui, +OwnDialogs
			MsgBox,, Window Name Taken , That name is already taken.
			return
		}
		HB_BitmapMaker_v7.Add_CodeInsert( CodeInsertName  , CodeInsertNotes , CodeInsertContents , CodeInsertSection )
		
		This.NewCodeInsertWindow := ""
	}
	
}

class NewFunctionWindowClass	extends PopUpWindow_Addons {
	
	__New(){
		local obj := {} , cc
		obj.W 				:= 639
		obj.X 				:= HB_BitmapMaker_v7.ElementsMainWindow.X + 60
		obj.Y 				:= HB_BitmapMaker_v7.ElementsMainWindow.Y + 90
		obj.H 				:= 750
		obj.MarginX 		:= 10
		obj.MarginY 		:= 3
		obj.Color 			:= "12161a"
		obj.ControlColor 	:= "32363a"
		obj.MinWidth		:= 190
		obj.MinHeight		:= 55
		obj.MaxWidth		:= obj.W
		obj.MaxHeight		:= obj.H
		obj.ToggleWidth		:= obj.MinWidth
		obj.ToggleHeight	:= obj.MinHeight
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		;~ cc := This.NewProjectWindow := New PopUpWindow_V3( "-DPIScale -Caption +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "New Project Window" ,, obj )
		cc := This.NewFunctionWindow := New PopUpWindow_V3( "-DPIScale -Caption +Border +Owner" HB_BitmapMaker_v7.MainWindow.Hwnd , "New CodeInsert Window" ,, obj )
		
		cc.Add( "Text" , "xm ym w580 h25 Center Border 0x200" , "New Function" , "MoveWindowButton" , This.PostMoveWindow.Bind( This , "NewFunctionWindow" ) )
		cc.SetMargin( cc.MarginX , 10 )
		cc.Add( "Text" , "x+m yp w25 hp Center Border 0x200" , "X" ,, This.PostCloseWindow.Bind( This , "NewFunctionWindow" ) )
		cc.SetMargin( 10 , 15 )
		;~ cc.SetFont( ,, "00FFFF" )
		cc.SetFont( ,, "00FF00" )
		cc.Add( "Text" , "xm y+m h25 w120  0x200" , "Function Name: " )
		cc.Add( "Edit" , "x+10 w470 r1 " , "" , "FunctionNameEdit"  )
		cc.SetMargin( 10 , 5 )
		
		cc.SetFont( ,, "FFFF00" )
		cc.Add( "Text" , "xm y+m h25 w120 0x200" , "Note:" )
		cc.Add( "Edit" , "x+10 w470 r3 " , "" , "FunctionNotesEdit"  )
		
		cc.SetFont( ,, "00FFFF" )
		cc.Add( "Text" , "xm y+m h25 w120 0x200" , "Function Definition:" )
		cc.Add( "Edit" , "x+10 w470 r9 +WantTab" , "" , "FunctionDefinitionEdit"  )
		
		cc.SetMargin( 10 , 15 )
		cc.SetFont( ,, "FFFFFF" )
		cc.Add( "Text" , "xm y+m w300 h30 Center 0x200 Border" , "Add Function" , "AddFunctionButton" , This._AddFunction.Bind( This ) )
		cc.Add( "Text" , "x+m yp w300 h30 Center 0x200 Border" , "Cancel" , "CancelButton" , This.PostCloseWindow.Bind( This , "NewFunctionWindow" ) )
		cc.Show( "AutoSize" )
		
	}
	_AddFunction(){
		local cc := This.NewFunctionWindow
		local FunctionName := cc.Get( cc.Controls.FunctionNameEdit )
		local FunctionNotes := cc.Get( cc.Controls.FunctionNotesEdit )
		local FunctionDefinition := cc.Get( cc.Controls.FunctionDefinitionEdit )
		
		
		if( FunctionName = "" ){
			SoundBeep, 999
			SoundBeep, 999
			SoundBeep, 999
			return
		}
		FunctionName := strReplace( FunctionName , A_Space , "_" )
		if( HB_BitmapMaker_v7.Check_FunctionList( FunctionName ) ){
			Gui, +OwnDialogs
			MsgBox,, Function Name Taken , That name is already taken.
			return
		}
		
		HB_BitmapMaker_v7.Add_Function( FunctionName  , FunctionNotes , FunctionDefinition )
		
		This.NewFunctionWindow := ""
	}
	
}

;;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|;|<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>||<<<---(0)_(0)--->>>|
class MonitorClass	{
	
	MonitorCount[]{
		Get{
			if( !This._MonitorCount ){
				SysGet, OutputVar, MonitorCount
				This._MonitorCount := OutputVar
			}
			return This._MonitorCount
		}Set{
			SysGet, OutputVar, MonitorCount
			This._MonitorCount := OutputVar
		}
	}
	MonitorPrimary[]{
		Get{
			if( !This._MonitorPrimary ){
				SysGet, OutputVar, MonitorPrimary
				This._MonitorPrimary := OutputVar
			}
			return This._MonitorPrimary
		}Set{
			SysGet, OutputVar, MonitorPrimary
			This._MonitorPrimary := OutputVar
		}
	}
	CurrentMonitor[]{
		Get{
			CoordMode, Mouse, Screen 
			MouseGetPos, x , y
			Loop, % This.MonitorCount	{
				SysGet, cM, Monitor, % A_Index
				mx := cmLeft
				my := cmTop
				mw := cmLeft + cmRight
				mh := cmTop + cmBottom
				if( x >= mx && x <= mx + mw && y >= my && y <= my + mh ){
					return A_Index
				}
			}
			Gui, +OwnDialogs
			MsgBox, Error , Error
			
		}Set{
			Loop, 3
				SoundBeep 999
			Gui, +OwnDialogs
			msgbox, you can't do that
		}
	}
	GetMonitorWorkArea( monitorNumber := 1 ){
		SysGet, wa , MonitorWorkArea , % monitorNumber
		return { X: waLeft , Y: waTop , W: waLeft + waRight , H: waTop + waBottom }
	}
	GetMonitorCount(){
		return This.MonitorCount
	}
	GetCurrentMonitor(){
		return This.CurrentMonitor
	}
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ControlsSetupClass extends ControlPositionsClass	{
	
	static MainWindowControls  := [ "MoveButton" , "MinimizeButton" , "MinSizeButton" , "MaxSizeButton" , "CloseButton" , "ControlArea" , "CycleUpButton" , "ProjectDisplayArea" , "CycleDownButton" , "VertSlider" , "HorzSlider" , "ResizeButton" ]
	
	CreateControls_MainWindow(){
		
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "HB Bitmap Maker v7" , "MoveButton" , This.PostMoveWindow.Bind( This , "MainWindow" ) )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "_" , "MinimizeButton" , This.PostMinimizeWindow.Bind( This , "MainWindow" ) )
		This.MainWindow.SetFont( "WebDings" )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "2" , "MinSizeButton" , This.PostMinSizeWindow.Bind( This , "MainWindow" ) )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "1" , "MaxSizeButton" , This.PostMaxSizeWindow.Bind( This , "MainWindow" ) )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "r" , "CloseButton" , This.PostCloseWindow.Bind( This , "MainWindow" ) )
		This.MainWindow.SetFont( "Segoe UI" )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "" , "ControlArea" )
		;**************************
		
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "Project Panel" , "ToggleProjectsPanelButton" , This.Toggle_Projects_Panel.Bind( This ) )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "Element Panel" , "ToggleElementsPanelButton" , This.Toggle_Elements_Panel.Bind( This ) )
		
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "Run Test Window" , "RunTestWindowButton" , This.RunTestWindow.Bind( This ) )
		
		
		
		
		;**************************
		
		
		
		
		
		This.MainWindow.SetFont( "WebDings" )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "5" , "CycleUpButton" )
		This.MainWindow.SetFont( "Segoe UI" )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "Projects Display Area" , "ProjectDisplayArea" )
		This.MainWindow.SetFont( "WebDings" )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "6" , "CycleDownButton" )
		This.MainWindow.SetFont( "Segoe UI" )
		;~ This.MainWindow.Add( "Slider" , "+Tooltip Left AltSubmit Vertical Range0-0" , 0 , "VertSlider" , This.PostAdjustSlider.Bind( This , "MainWindow" , "VertSlider" ) )
		This.MainWindow.Add( "Slider" , "+Tooltip Left AltSubmit Vertical Range0-0 +Thick -Theme" , 0 , "VertSlider" , This.PostAdjustSlider.Bind( This , "MainWindow" , "VertSlider" ) )
		This.MainWindow.Add( "Slider" , "+Tooltip Left AltSubmit Range0-0 +Thick -Theme" , 0 , "HorzSlider" , This.PostAdjustSlider.Bind( This , "MainWindow" , "HorzSlider" ) )
		This.MainWindow.SetFont( "WingDings" )
		This.MainWindow.Add( "Text" , "Center 0x200 Border" , "v" , "ResizeButton" , This.PostResizeWindow.Bind( This , "MainWindow" ) )
		This.MainWindow.SetFont( "Segoe UI" )
		;~ This.MainWindow.Add( "Text" , "Center 0x200 Border" , "Projects Panel" , "ProjectsPanelButton" , HB_BitmapMaker_V6.Toggle_ProjectsPanel.Bind( HB_BitmapMaker_V6 ) )
		
		
	}
	CreateControls_MainShellWindow(){
		; Your code for creating controls for the MainShellWindow goes here
	}
	CreateControls_MainInnerWindow(){
		; Your code for creating controls for the MainInnerWindow goes here
	}
	CreateControls_ProjectsMainWindow(){
		This.ProjectsMainWindow.Add( "Text" , "Center 0x200 Border" , "Projects Panel" , "MoveButton" , This.PostMoveWindow.Bind( This , "ProjectsMainWindow" ) )
		This.ProjectsMainWindow.SetFont( "WebDings" )
		This.ProjectsMainWindow.Add( "Text" , "Center 0x200 Border" , "2" , "MinSizeButton" , This.PostMinSizeWindow.Bind( This , "ProjectsMainWindow" ) )
		This.ProjectsMainWindow.Add( "Text" , "Center 0x200 Border" , "1" , "MaxSizeButton" , This.PostMaxSizeWindow.Bind( This , "ProjectsMainWindow" ) )
		This.ProjectsMainWindow.Add( "Text" , "Center 0x200 Border" , "r" , "CloseButton" , This.PostCloseWindow.Bind( This , "ProjectsMainWindow" ) )
		This.ProjectsMainWindow.SetFont( "Segoe UI" )
		This.ProjectsMainWindow.Add( "Slider" , "+Tooltip Left AltSubmit Vertical Range0-0 +Thick" , 0 , "VertSlider" , This.PostAdjustSlider.Bind( This , "ProjectsMainWindow" , "VertSlider" ) )
		This.ProjectsMainWindow.Add( "Slider" , "+Tooltip Left AltSubmit Range0-0 +Thick" , 0 , "HorzSlider" , This.PostAdjustSlider.Bind( This , "ProjectsMainWindow" , "HorzSlider" ) )
		This.ProjectsMainWindow.SetFont( "WingDings" )
		This.ProjectsMainWindow.Add( "Text" , "Center 0x200 Border" , "v" , "ResizeButton" , This.PostResizeWindow.Bind( This , "ProjectsMainWindow" ) )
		This.ProjectsMainWindow.SetFont( "Segoe UI" )
		;~ This.Set_AllControls_Positions()
	}
	CreateControls_ProjectsShellWindow(){
		; Your code for creating controls for the ProjectsShellWindow goes here
	}
	CreateControls_ProjectsInnerWindow(){
		; Your code for creating controls for the ProjectsInnerWindow goes here
	}
	CreateControls_ElementsMainWindow(){
		This.ElementsMainWindow.Add( "Text" , "Center 0x200 Border" , "Elements Panel" , "MoveButton" , This.PostMoveWindow.Bind( This , "ElementsMainWindow" ) )
		This.ElementsMainWindow.SetFont( "WebDings" )
		This.ElementsMainWindow.Add( "Text" , "Center 0x200 Border" , "2" , "MinSizeButton" , This.PostMinSizeWindow.Bind( This , "ElementsMainWindow" ) )
		This.ElementsMainWindow.Add( "Text" , "Center 0x200 Border" , "1" , "MaxSizeButton" , This.PostMaxSizeWindow.Bind( This , "ElementsMainWindow" ) )
		This.ElementsMainWindow.Add( "Text" , "Center 0x200 Border" , "r" , "CloseButton" , This.PostCloseWindow.Bind( This , "ElementsMainWindow" ) )
		This.ElementsMainWindow.SetFont( "Segoe UI" )
		This.ElementsMainWindow.Add( "Slider" , "+Tooltip Left AltSubmit Vertical Range0-0 +Thick" , 0 , "VertSlider" , This.PostAdjustSlider.Bind( This , "ElementsMainWindow" , "VertSlider" ) )
		This.ElementsMainWindow.Add( "Slider" , "+Tooltip Left AltSubmit Range0-0 +Thick" , 0 , "HorzSlider" , This.PostAdjustSlider.Bind( This , "ElementsMainWindow" , "HorzSlider" ) )
		This.ElementsMainWindow.SetFont( "WingDings" )
		This.ElementsMainWindow.Add( "Text" , "Center 0x200 Border" , "v" , "ResizeButton" , This.PostResizeWindow.Bind( This , "ElementsMainWindow" ) )
		This.ElementsMainWindow.SetFont( "Segoe UI" )
		;~ This.ElementsMainWindow.Set_AllControls_Positions()
	}
	CreateControls_ElementsShellWindow(){
		; Your code for creating controls for the ElementsShellWindow goes here
	}
	CreateControls_ElementsInnerWindow(){
		; Your code for creating controls for the ElementsInnerWindow goes here
	}
	CreateControls_ProjectTab(){
		This.ProjectTab.Add( "Text" 	, "Center 0x200 Border" , "Project Tab  [ Alt + 1 ]" 		, "TabToggleButton" 				, This.PostToggleTab.Bind( This , "Projects" , "ProjectTab" ) )
		This.ProjectTab.Add( "ListBox" 	, "Choose1" 			,									, "ProjectsListBox" 				, This.Set_SelectedProject.Bind( This ) )
		This.ProjectTab.Add( "Text" 	, "Center 0x200 Border" , "New Project" 					, "NewProjectButton" 				, This.Add_NewProject_DisplayWindow.Bind( This ) )
		This.ProjectTab.Add( "Text" 	, "Center 0x200 Border" , "Load Project" 					, "LoadProjectButton" 				, This.Load_Project_DisplayWindow.Bind( This ) )
		This.ProjectTab.Add( "Text" 	, "Center 0x200 Border" , "Close Project" 					, "CloseProjectButton" 				, This.CloseProject.Bind( This ) )
		This.ProjectTab.Add( "Text" 	, "Center 0x200 Border" , "Copy Project" 					, "CopyProjectButton" 				, This.CopyProject.Bind( This ) )
		This.ProjectTab.Add( "Text" 	, "Center 0x200 Border" , "Delete Project" 					, "DeleteProjectButton" 			, This.DeleteProject.Bind( This ) )
		This.ProjectTab.Add( "Text" 	, "Center 0x200 Border" , "Open Main Folder" 				, "OpenMainProjectFolderButton" 	, This.OpenMainProjectFolder.Bind( This ) )
		This.ProjectTab.Add( "Text" 	, "Center 0x200 Border" , "Open Selected Project Folder"	, "OpenSelectedProjectFolderButton"	, This.OpenSelectedProjectFolder.Bind( This ) )
	}
	CreateControls_WindowTab(){
		;~ This.Add( "Text" , "Center 0x200 Border" , "Window Tab" , "TabToggleButton" , This.ParentObject.ToggleTabSize.Bind( This.ParentObject , "WindowTab" ) )
		This.WindowTab.Add( "Text" 		, "Center 0x200 Border" , "Window Tab  [ Alt + 2 ]" 	, "TabToggleButton" 			, This.PostToggleTab.Bind( This , "Projects" , "WindowTab" ) )
		This.WindowTab.Add( "ListBox" 	, "" 					, "" 							, "WindowsListBox" 				, This.Set_SelectedWindow.Bind( This ) )
		This.WindowTab.Add( "Text" 		, "Center 0x200 Border" , "New Window" 					, "NewWindowButton" 			, This.Add_NewWindow_DisplayWindow.Bind( This ) )
		This.WindowTab.Add( "Text" 		, "Center 0x200 Border" , "Copy Window" 				, "CopyWindowButton" 			, This.CopySelectedWindow.Bind( This ) )
		This.WindowTab.Add( "Text" 		, "Center 0x200 Border" , "Delete Window" 				, "DeleteWindowButton" 			, This.DeleteWindow.Bind( This ) )
		This.WindowTab.Add( "Text" 		, "Center 0x200 Border" , "Open Project Folder" 		, "OpenProjectFolderButton" 	)
		This.WindowTab.Add( "Text" 		, "Center 0x200 Border" , "Open Windows Folder" 		, "OpenWindowsFolderButton" 	)
		This.WindowTab.SetFont( ,, "00FFFF" )
		This.WindowTab.Add( "Text" 		, " 0x200 " 			, "Window Type:" 				, "WindowTypeText" )
		This.WindowTab.Add( "DDL" 		, " 0x200 " 			, "NormalWindow||LayeredWindow" , "WindowTypeDDL" )
		This.WindowTab.SetFont( ,, "00FF00" )
		This.WindowTab.Add( "Text" 		, " 0x200 " 			, "Window Name:" 				, "WindowNameText" )
		This.WindowTab.Add( "Edit" 		, "" 					, "+AlwaysOnTop" 				, "WindowNameEdit" )
		This.WindowTab.SetFont( ,, "FFFF00" )
		This.WindowTab.Add( "Text" 		, " 0x200 " 			, "Window Options:" 			, "WindowOptionsText" )
		This.WindowTab.Add( "Edit" 		, "" 					, "+AlwaysOnTop" 				, "WindowOptionsEdit" )
		This.WindowTab.SetFont( ,, "FFFFFF" )
		This.WindowTab.Add( "Text" 		, " 0x200 " 			, "Window Title:" 				, "WindowTitleText" )
		This.WindowTab.Add( "Edit" 		, "" 					, "+AlwaysOnTop" 				, "WindowTitleEdit" )
		This.WindowTab.SetFont( ,, "00FFFF" )
		This.WindowTab.Add( "Text" 		, " 0x200 " 			, "Window Defaults:" 				, "WindowDefaultsText" )
		This.WindowTab.Add( "Edit" 		, "" 					, "{ AutoShow: 1 }" 				, "WindowDefaultsEdit" )
		
		This.WindowTab.SetFont( ,, "00FF00" )
		This.WindowTab.Add( "Text" 		, " 0x200 " 			, "Function Params:" 			, "WindowFunctionParamsText" )
		This.WindowTab.Add( "Edit" 		, "" 					, "obj := """" , var := """""	, "WindowFunctionParamsEdit" )
		
		This.WindowTab.SetFont( ,, "FFFF00" )
		This.WindowTab.Add( "Text" 		, " 0x200 Center Border " 			, "Clip Window Call" 			, "ClipWindowCallButton" )
		This.WindowTab.Add( "Text" 		, " 0x200 Center Border " 			, "" 			, "WindowCallPrototypeText" )
		
		
		This.WindowTab.SetFont( ,, "FFFFFF" )
		This.WindowTab.Add( "Text" 		, "Center 0x200 Border" , "Update Window" 				, "UpdateWindowDefaultsButton" , This.UpdateWindow.Bind( This ) )
		This.WindowTab.Add( "Text" 		, "Center 0x200 Border" , "Run Test" 					, "RunTestWindowButton" , This.RunTestWindow.Bind( This ) )
		This.WindowTab.Add( "CheckBox" 	, "" 					, "Make BitmapMaker Child" 		, "MakeDemoWindowChildCheckBox" )
	}
	CreateControls_BitmapTab(){
		; Your code for creating controls for the BitmapTab goes here
	}
	CreateControls_ClassTab(){
		; Your code for creating controls for the ClassTab goes here
	}
	CreateControls_FunctionTab(){
		This.FunctionTab.Add( "Text" 		, "Center 0x200 Border" , "Function Tab  [ Alt + 5 ]" 					, "TabToggleButton" 			, This.PostToggleTab.Bind( This , "Projects" , "FunctionTab" ) )
		This.FunctionTab.Add( "Listbox" , "" , "" , "FunctionListbox" , This.Set_SelectedFunction.Bind( This ) )
		This.FunctionTab.Add( "Text" , "Center 0x200 Border" , "Add New Function" , "AddNewFunctionButton" , This.Add_NewFunction_DisplayWindow.Bind( This )  )
		This.FunctionTab.Add( "Text" , "Center 0x200 Border" , "Delete Function" , "DeleteFunctionButton"  )
		
		
		This.FunctionTab.Add( "Text" , "Center 0x200 Border" , "Name / Description" , "Param1Text" )
		This.FunctionTab.Add( "Edit" , "" , "Code Insert 1" , "Param1Edit" )
		
		This.FunctionTab.Add( "Text" , "Center 0x200 Border" , "Notes" , "Param2Text" )
		This.FunctionTab.Add( "Edit" , "r3" , "Notes" , "Param2Edit" )
		
		This.FunctionTab.Add( "Text" , "Center 0x200 Border" , "Contents" , "Param3Text" )
		This.FunctionTab.Add( "Edit" , "+WantTab r9 -Wrap +Hscroll" , ";Code Contents" , "Param3Edit" )
		
		This.FunctionTab.Add( "Text" , "Center 0x200 Border" , "Update Function" , "UpdateFunctionButton" , This.Submit_ParamEdit_Function_Values.Bind( This ) )
		
		
		This.FunctionTab.Add( "Text" , "Center 0x200 Border" , "Open In Notepad" , "OpenInNotepadButton" , This.Open_Function_In_NotePad.Bind( This ) )
		This.FunctionTab.Add( "Text" , "Center 0x200 Border" , "Open In Editor" , "OpenInDefaultEditorButton" , This.Open_Function_In_NotePad.Bind( This , "Edit" ) )
		
		
		
	}
	CreateControls_LabelTab(){
		This.LabelTab.Add( "Text" 		, "Center 0x200 Border" , "Label Tab  [ Alt + 6 ]" 					, "TabToggleButton" 			, This.PostToggleTab.Bind( This , "Projects" , "LabelTab" ) )
	}
	CreateControls_ScriptTab(){
		This.ScriptTab.Add( "Text" 		, "Center 0x200 Border" , "Script Tab  [ Alt + 7 ]" 					, "TabToggleButton" 			, This.PostToggleTab.Bind( This , "Projects" , "ScriptTab" ) )
		
		This.ScriptTab.Add( "Listbox" , "" , "Window Function Insert|Window Call Insert|Code Insert|Function Insert|Class Insert|Label Insert|Function Call Insert" , "ScriptInsertTypeListbox" , This.Submit_InsertType.Bind( This ) )
		This.ScriptTab.Add( "Listbox" , "" , "" , "AvailableScriptInsertsListbox"  )
		
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Add Selected Element" , "AddScriptElementButton" , This.Add_ScriptElement.Bind( This ) )
		
		
		;~ This.ScriptTab.Add( "Listbox" , "" , "" , "OutputListbox"  )
		This.ScriptTab.Add( "ListView" , "Choose1 AltSubmit r11 vScriptElementsListView" , "Position|Name|Type|" , "OutputListview" , This.Set_SelectedScriptElement.Bind( This ) )
		This.ScriptTab.Controls.OutputListview.VarName := "ScriptElementsListView"
		fs := This.ScriptTab.FontSize
		
		This.ScriptTab.SetFont( , 10 , "FF3333" )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Remove Element" , "RemoveScriptElementButton" , This.RemoveScriptElement.Bind( This ) )
		This.ScriptTab.SetFont( , 10 , "000000" )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Move Element Up" , "MoveScriptElementUpButton" , This.Move_ScriptElement.Bind( This , "Up" ) )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Move Element Down" , "MoveScriptElementDownButton" , This.Move_ScriptElement.Bind( This , "Down" ) )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Move Element Top" , "MoveScriptElementTopButton" , This.Move_ScriptElement.Bind( This , "Top" ) )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Move Element Bottom" , "MoveScriptElementBottomButton" , This.Move_ScriptElement.Bind( This , "Bottom" ) )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Insert At" , "InsertScriptElementAtButton" , This.Move_ScriptElement.Bind( This , "InsertAt" ) )
		This.ScriptTab.SetFont( , fs , "FFFFFF" )
		This.ScriptTab.Add( "Edit" , "Center Number r1" , "1" , "InsertScriptElementAtEdit" )
		
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Focus Element" , "FocusScriptElementButton" )
		
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Save Script" , "SaveScriptButton" , This._Save_Script.Bind( This ) )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Run and Save Script" , "RunAndSaveScriptButton" , This._Save_And_Run_Script.Bind( This ) )
		This.ScriptTab.SetFont( , fs , "00FF00" )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Open In Editor" , "OpenScriptInEditorButton" )
		This.ScriptTab.SetFont( , fs , "880000" )
		This.ScriptTab.Add( "Text" , "Center 0x200 Border" , "Save As (save elsewhere)" , "SaveAsButton" , This.Save_Script_As.Bind( This ) )
		
		
		
		
	}
	CreateControls_WindowElementTab(){
		local colors := [ "FFFF00" , "00FF00" , "00FFFF" , "FFFFFF" ] , cIndex := -1 , length := colors.Length()
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "WindowElement Tab" , "TabToggleButton" , This.PostToggleTab.Bind( This , "Elements" , "WindowElementTab" ) )
		This.WindowElementTab.Add( "DDL" , "Choose1 r15" , "" , "ElementDDL" )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Add" , "NewElementButton" , This.Add_New_WindowElement.Bind( This ) )
		This.WindowElementTab.SetControlList( This.WindowElementTab.Controls.ElementDDL , This.WindowElementTypeList , 1 )
		
		;~ This.WindowElementTab.Add( "ListBox" , "Choose1 AltSubmit r13" , "Item|Item|Item|Item|Item|Item|Item|Item|Item|Item|" , "WindowElementsListView"  , This.Set_SelectedElement.Bind( This ) )
		This.WindowElementTab.Add( "ListView" , "Choose1 AltSubmit r11 vWindowElementsListView" , "Position|Element Type|Param 1|Param 2|Param 3|Param 4|Param 5|Param 6|Param 7|Param 8|Param 9|Param 10|Param 11|" , "WindowElementsListView"  , This.Set_SelectedWindowElement.Bind( This ) )
		This.WindowElementTab.Controls.WindowElementsListView.VarName := "WindowElementsListView"
		
		LV_ModifyCol( 1 , "Integer" )
		;~ LV_ModifyCol(  , 140 )
		LV_ModifyCol(1,40)
		LV_ModifyCol(2,80)
		LV_ModifyCol(3,150)
		
		;~ LV_Delete()
		;~ LV_Add( "" , "Add" , "ControlType := ""Button""" , "options := """"" )
		;~ LV_Add( "" , "Add" , "ControlType := ""Edit""" , "options := ""xm ym w200""" )
		;~ LV_ModifyCol()
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Copy Element" , "CopyElementButton" , This.CopyWindowElement.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Move Element Up" , "MoveElementUpButton" , This.Move_WindowElement_Up.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Move Element Down" , "MoveElementDownButton" , This.Move_WindowElement_Down.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Move To Top" , "MoveElementToTopButton" , This.Move_WindowElement_ToTop.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Move To Bottom" , "MoveElementToBottomButton" , This.Move_WindowElement_ToBottom.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Insert At" , "InsertAtButton" , This.Move_WindowElement_InsertAt.Bind( This ) )
		This.WindowElementTab.Add( "Edit" , "Center Number" , "1" , "InsertAtEdit" )
		
		
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Delete Element" , "DeleteElementButton" , This.DeleteWindowElement.Bind( This ) )
		This.WindowElementTab.Add( "CheckBox" , "" , "Clear" , "AutoClearDefaultsCheckbox" , This.ToggelAutoClear.Bind( This ) )
		This.WindowElementTab.Add( "CheckBox" , "border" , "Save" , "AutoSaveCheckbox" )
		
		This.WindowElementTab.Add( "DropDownList" , "" , "1|5||10|15|20|25|30|45|60" , "AutoSaveIntervalDDL" )
		
		This.WindowElementTab.SetFont( ,, "FFFFFF" )
		This.WindowElementTab.Add( "Text" , "Center Border 0x200" , "Clip Output" , "ClipOutputStringText" , This.ClipElementOutputString.Bind( This ) )
		This.WindowElementTab.SetFont( ,, "00FF00" )
		This.WindowElementTab.Add( "Text" , " Border 0x200" , "Output String" , "OutputStringText" )
		
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1 ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param1" , "Param1Text" , This.ClipParam1.Bind( This ) )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param1" , "Param1Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param1Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param2" , "Param2Text" , This.Set_Param2FromClipboard.Bind( This ) )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param2" , "Param2Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param2Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param3" , "Param3Text" )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param3" , "Param3Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param3Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param4" , "Param4Text" , This.ClipControlObjectName.Bind( This ) )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param4" , "Param4Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param4Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param5" , "Param5Text" )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param5" , "Param5Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param5Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param6" , "Param6Text" )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param6" , "Param6Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param6Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param7" , "Param7Text" )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param7" , "Param7Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param7Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param8" , "Param8Text" )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param8" , "Param8Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param8Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param9" , "Param9Text" )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param9" , "Param9Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param9Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param10" , "Param10Text" )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param10" , "Param10Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param10Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.SetFont( ,, colors[ mod( ++cIndex , length ) + 1  ] )
		This.WindowElementTab.Add( "Text" , " 0x200 Border" , " Param11" , "Param11Text" )
		This.WindowElementTab.Add( "Edit" , "r1" , "Param11" , "Param11Edit" , This.Submit_ParamEdit_Value.Bind( This , cIndex + 1 ) )
		This.WindowElementTab.Add( "CheckBox" , "Checked" ,, "Param11Checkbox" , This.SetExpressionMode.Bind( This , cIndex + 1 ) )
		
		*/
		
		This.WindowElementTab.SetFont( ,, "FFFFFF" )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Save And Test Window" , "TestWindowButton" , This.RunTestWindow.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Clear All Parameters" , "ClearAllParamsButton" , This.ClearAllParams.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Save Window" , "SaveWindowButton" , This.SaveWindowElements.Bind( This ) )

		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Open Window In Editor" , "OpenWindowCodeInEditorButton" , This.OpenWindowCodeInEditor.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Clipboard Window" , "ClipboardWindowFunctionButton" , This.ClipWindowFunction.Bind( This ) )
		This.WindowElementTab.Add( "Text" , "Center 0x200 Border" , "Open Window ini File" , "OpenWindowIniFileButton" , This.OpenWindowIniFile.Bind( This ) )
	}
	CreateControls_BitmapElementTab(){
		; Your code for creating controls for the BitmapElementTab goes here
	}
	CreateControls_CodeInsertTab(){
		
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Code Insert Tab" , "TabToggleButton" , This.PostToggleTab.Bind( This , "Elements" , "CodeInsertTab" ) )
		This.CodeInsertTab.Add( "ListBox" , "" , "" , "CodeInsertListbox" , This.Set_SelectedCodeInsert.Bind( This ) )
		
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Section Name" , "SectionNameText" )
		This.CodeInsertTab.Add( "DDL" , "" , "All||Section 1|Section 2|Section 3|Section 4|Gui Stuff|AutoExecute Stuff|Functions Stuff|" , "SectionNameDDL" , This.Set_SelectedCodeInsert_Section.Bind( This ) )
		
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "New Code Insert" , "NewCodeInsertButton" , This.Add_New_CodeInsert.Bind( This ) )
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Copy Code Insert" , "CopyCodeInsertButton" )
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Name / Description" , "Param1Text" )
		This.CodeInsertTab.Add( "Edit" , "" , "Code Insert 1" , "Param1Edit" )
		
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Notes" , "Param2Text" )
		This.CodeInsertTab.Add( "Edit" , "r3" , "Notes" , "Param2Edit" )
		
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Contents" , "Param3Text" )
		This.CodeInsertTab.Add( "Edit" , "r9 -Wrap +Hscroll +WantTab" , ";Code Contents" , "Param3Edit" )
		
		
		
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "+" , "NewSectionButton" )
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Section:" , "SectionText" )
		This.CodeInsertTab.Add( "DDL" , "" , "Section 1||Section 2|Section 3|Section 4|Gui Stuff|AutoExecute Stuff|Functions Stuff|" , "SectionDDL" )
		
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Update Code Insert" , "UpdateCodeInsertButton" , This.Submit_ParamEdit_Values.Bind( This ) )
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Open in NotePad" , "OpenInNotepadButton" , This.Open_In_NotePad.Bind( This ) )
		This.CodeInsertTab.Add( "Text" , "Center 0x200 Border" , "Open in Editor" , "OpenInDefaultEditorButton" , This.Open_In_NotePad.Bind( This , "edit" ) )
	}
	CreateControls_ClassElementTab(){
		; Your code for creating controls for the ClassElementTab goes here
	}
	CreateControls_FunctionElementTab(){
		; Your code for creating controls for the FunctionElementTab goes here
	}
	CreateControls_LabelElementTab(){
		; Your code for creating controls for the LabelElementTab goes here
	}
	CreateControls_VarableTab(){
		; Your code for creating controls for the VarableTab goes here
	}
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ControlPositionsClass extends PopUpWindow_Addons	{
	
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;MainWindow controls
	Set_AllControl_Positions_MainWindow(){
		This.Set_ControlPosition_MainWindow_MoveButton()
		This.Set_ControlPosition_MainWindow_MinimizeButton()
		This.Set_ControlPosition_MainWindow_MinSizeButton()
		This.Set_ControlPosition_MainWindow_MaxSizeButton()
		This.Set_ControlPosition_MainWindow_CloseButton()
		This.Set_ControlPosition_MainWindow_ControlArea()
		This.Set_ControlPosition_MainWindow_ToggleProjectsPanelButton()
		This.Set_ControlPosition_MainWindow_ToggleElementsPanelButton()
		This.Set_ControlPosition_MainWindow_RunTestWindowButton()
		This.Set_ControlPosition_MainWindow_CycleUpButton()
		This.Set_ControlPosition_MainWindow_ProjectDisplayArea()
		This.Set_ControlPosition_MainWindow_CycleDownButton()
		This.Set_ControlPosition_MainWindow_VertSlider()
		This.Set_ControlPosition_MainWindow_HorzSlider()
		This.Set_ControlPosition_MainWindow_ResizeButton()
	}
	Set_ControlPosition_MainWindow_MoveButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.MoveButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := ym
		cc.W := 150
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_MainWindow_MinimizeButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.MinimizeButton
		local dd := controls.MoveButton
		local xm := 1
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := dd.H
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_MainWindow_MinSizeButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.MinSizeButton
		local dd := controls.MinimizeButton
		local xm := 1
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := dd.H
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_MainWindow_MaxSizeButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.MaxSizeButton
		local dd := controls.MinSizeButton
		local xm := 1
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := dd.H
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_MainWindow_CloseButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.CloseButton
		local dd := controls.MaxSizeButton
		local xm := 1
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := dd.H
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_MainWindow_ControlArea(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.ControlArea
		local dd := controls.MoveButton
		local ee := controls.CloseButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		cc.W := ee.X + ee.W - dd.X
		cc.H := 200
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_ToggleProjectsPanelButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.ToggleProjectsPanelButton
		local dd := controls.ControlArea
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + xm
		cc.Y := dd.Y + ym
		cc.W := dd.W - 2 * xm
		cc.H := 35
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_ToggleElementsPanelButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.ToggleElementsPanelButton
		local dd := controls.ToggleProjectsPanelButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W 
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_RunTestWindowButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.RunTestWindowButton
		local dd := controls.ToggleElementsPanelButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W 
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_CycleUpButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.CycleUpButton
		local dd := controls.ControlArea
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := 30
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_ProjectDisplayArea(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.ProjectDisplayArea
		local dd := controls.CycleUpButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := window.H - ( cc.Y + ( 2 * ym ) + dd.H )
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_CycleDownButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.CycleDownButton
		local dd := controls.CycleUpButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := window.H - ( ym + dd.H )
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_ResizeButton(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.ResizeButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.W := 15
		cc.H := cc.W
		cc.X := window.W - ( cc.W + xm )
		cc.Y := window.H - ( cc.H + ym )
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_VertSlider(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.VertSlider
		local dd := controls.ResizeButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.W := 20
		cc.H := window.H - ( dd.H + 3 * ym )
		cc.X := window.W - ( cc.W + xm )
		cc.Y := ym
		
		window.MoveControl(cc)
	}
	Set_ControlPosition_MainWindow_HorzSlider(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := controls.HorzSlider
		local dd := controls.ResizeButton
		local ee := controls.CycleDownButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := ee.X + ee.W + xm
		cc.W := window.W - ( cc.X + dd.W + 2 * xm )
		cc.H := 20
		cc.Y := window.H - ( cc.H + ym )
		window.MoveControl(cc)
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;MainShellWindow controls
	Set_AllControl_Positions_MainShellWindow(){
		; Your code for setting all control positions for the MainShellWindow goes here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;MainInnerWindow controls
	Set_AllControl_Positions_MainInnerWindow(){
		; Your code for setting all control positions for the MainInnerWindow goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ProjectsMainWindow controls
	Set_AllControl_Positions_ProjectsMainWindow(){
		; Your code for setting all control positions for the ProjectsMainWindow goes here
		This.Set_ControlPosition_ProjectsMainWindow_MoveButton()
		This.Set_ControlPosition_ProjectsMainWindow_MinSizeButton()
		This.Set_ControlPosition_ProjectsMainWindow_MaxSizeButton()
		This.Set_ControlPosition_ProjectsMainWindow_CloseButton()
		This.Set_ControlPosition_ProjectsMainWindow_VertSlider()
		This.Set_ControlPosition_ProjectsMainWindow_HorzSlider()
		This.Set_ControlPosition_ProjectsMainWindow_ResizeButton()
	}
	Set_ControlPosition_ProjectsMainWindow_MoveButton(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local cc := controls.MoveButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := ym
		cc.W := 100
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_ProjectsMainWindow_MinSizeButton(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local cc := controls.MinSizeButton
		local dd := controls.MoveButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := ym
		cc.W := 25
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_ProjectsMainWindow_MaxSizeButton(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local cc := controls.MaxSizeButton
		local dd := controls.MinSizeButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := ym
		cc.W := 25
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_ProjectsMainWindow_CloseButton(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.CloseButton
		local dd := controls.MaxSizeButton
		cc.X := dd.X + dd.W + xm
		cc.Y := ym
		cc.W := 25
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_ProjectsMainWindow_VertSlider(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.VertSlider
		cc.W := 20
		cc.Y := ym + controls.MoveButton.Y + controls.MoveButton.H
		cc.H := window.H - 2 * ym - 25 - cc.Y
		cc.X := window.W - cc.W - xm
		window.MoveControl( cc )
	}
	Set_ControlPosition_ProjectsMainWindow_HorzSlider(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.HorzSlider
		local dd := controls.MoveButton
		cc.W := window.W - ( xm ) - 25
		cc.H := 20
		cc.X := xm
		cc.Y := window.H - cc.H - ym
		window.MoveControl( cc )
	}
	Set_ControlPosition_ProjectsMainWindow_ResizeButton(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.ResizeButton
		cc.W := 15
		cc.H := 15
		cc.X := window.W - 20
		cc.Y := window.H - 20
		window.MoveControl( cc )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ProjectsShellWindow controls
	Set_AllControl_Positions_ProjectsShellWindow(){
		; Your code for setting all control positions for the ProjectsShellWindow goes ... ... ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ProjectsInnerWindow controls
	Set_AllControl_Positions_ProjectsInnerWindow(){
		; Your code for setting all control positions for the ProjectsInnerWindow goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ElementsMainWindow controls
	Set_AllControl_Positions_ElementsMainWindow(){
		; Your code for setting all control positions for the ElementsMainWindow goes here
		This.Set_ControlPosition_ElementsMainWindow_MoveButton()
		This.Set_ControlPosition_ElementsMainWindow_MinSizeButton()
		This.Set_ControlPosition_ElementsMainWindow_MaxSizeButton()
		This.Set_ControlPosition_ElementsMainWindow_CloseButton()
		This.Set_ControlPosition_ElementsMainWindow_VertSlider()
		This.Set_ControlPosition_ElementsMainWindow_HorzSlider()
		This.Set_ControlPosition_ElementsMainWindow_ResizeButton()
	}
	Set_ControlPosition_ElementsMainWindow_MoveButton(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local cc := controls.MoveButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := ym
		cc.W := 100
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_ElementsMainWindow_MinSizeButton(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local cc := controls.MinSizeButton
		local dd := controls.MoveButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := ym
		cc.W := 25
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_ElementsMainWindow_MaxSizeButton(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local cc := controls.MaxSizeButton
		local dd := controls.MinSizeButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := ym
		cc.W := 25
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_ElementsMainWindow_CloseButton(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.CloseButton
		local dd := controls.MaxSizeButton
		cc.X := dd.X + dd.W + xm
		cc.Y := ym
		cc.W := 25
		cc.H := 25
		window.MoveControl( cc )
	}
	Set_ControlPosition_ElementsMainWindow_VertSlider(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.VertSlider
		cc.W := 20
		cc.Y := ym + controls.MoveButton.Y + controls.MoveButton.H
		cc.H := window.H - 2 * ym - 25 - cc.Y
		cc.X := window.W - cc.W - xm
		window.MoveControl( cc )
	}
	Set_ControlPosition_ElementsMainWindow_HorzSlider(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.HorzSlider
		local dd := controls.MoveButton
		cc.W := window.W - ( xm ) - 25
		cc.H := 20
		cc.X := xm
		cc.Y := window.H - cc.H - ym
		window.MoveControl( cc )
	}
	Set_ControlPosition_ElementsMainWindow_ResizeButton(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.ResizeButton
		cc.W := 15
		cc.H := 15
		cc.X := window.W - 20
		cc.Y := window.H - 20
		window.MoveControl( cc )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ElementsShellWindow controls
	Set_AllControl_Positions_ElementsShellWindow(){
		; Your code for setting all control positions for the ElementsShellWindow goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ElementsInnerWindow controls
	Set_AllControl_Positions_ElementsInnerWindow(){
		; Your code for setting all control positions for the ElementsInnerWindow goes ... ... ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ProjectTab controls
	Set_AllControl_Positions_ProjectTab(){
		This.Set_ControlPosition_ProjectTab_TabToggleButton()
		This.Set_ControlPosition_ProjectTab_ProjectsListBox()
		This.Set_NewProjectButton_Position()
		This.Set_LoadProjectButton_Position()
		This.Set_CloseProjectButton_Position()
		This.Set_CopyProjectButton_Position()
		This.Set_DeleteProjectButton_Position()
		This.Set_OpenMainProjectFolderButton_Position()
		This.Set_OpenSelectedProjectFolderButton_Position()
	}
	Set_ControlPosition_ProjectTab_TabToggleButton(){
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.TabToggleButton
		cc.X := xm
		cc.Y := ym
		cc.W := window.W - 2 * xm
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_ProjectTab_ProjectsListBox(){
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.ProjectsListBox
		local dd := controls.TabToggleButton
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		cc.W := 440
		cc.H := 180
		window.MoveControl( cc )
	}
	Set_NewProjectButton_Position(){
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.NewProjectButton
		local dd := controls.ProjectsListBox
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := 140
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_LoadProjectButton_Position(){
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.LoadProjectButton
		local dd := controls.NewProjectButton
		cc.X := dd.X 
		cc.Y := dd.Y + dd.H + ym
		cc.W := 140
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_CloseProjectButton_Position(){
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.CloseProjectButton
		local dd := controls.LoadProjectButton
		cc.X := dd.X 
		cc.Y := dd.Y + dd.H + ym
		cc.W := 140
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_CopyProjectButton_Position(){
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.CopyProjectButton
		local dd := controls.CloseProjectButton
		cc.X := dd.X 
		cc.Y := dd.Y + dd.H + ym
		cc.W := 140
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_DeleteProjectButton_Position(){
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.DeleteProjectButton
		local dd := controls.CopyProjectButton
		cc.X := dd.X 
		cc.Y := dd.Y + dd.H + ym
		cc.W := 140
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_OpenMainProjectFolderButton_Position(){
		
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.OpenMainProjectFolderButton
		local dd := controls.ProjectsListBox
		cc.X := xm
		cc.Y := dd.Y + dd.H 
		cc.W := dd.W / 2 + 70
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_OpenSelectedProjectFolderButton_Position(){
		local window := This.ProjectTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.OpenSelectedProjectFolderButton
		local dd := controls.OpenMainProjectFolderButton
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y 
		cc.W := dd.W 
		cc.H := dd.H
		window.MoveControl( cc )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;WindowTab controls
	Set_AllControl_Positions_WindowTab(){
		This.Set_ControlPosition_WindowTab_TabToggleButton()
		This.Set_ControlPosition_WindowTab_WindowsListBox()
		This.Set_ControlPosition_WindowTab_NewWindowButton()
		This.Set_ControlPosition_WindowTab_CopyWindowButton()
		This.Set_ControlPosition_WindowTab_DeleteWindowButton()
		This.Set_ControlPosition_WindowTab_OpenProjectFolderButton()
		This.Set_ControlPosition_WindowTab_OpenWindowsFolderButton()
		
		This.Set_ControlPosition_WindowTab_WindowTypeText()
		This.Set_ControlPosition_WindowTab_WindowTypeDDL()
		This.Set_ControlPosition_WindowTab_WindowNameText()
		This.Set_ControlPosition_WindowTab_WindowNameEdit()
		
		This.Set_ControlPosition_WindowTab_WindowOptionsText()
		This.Set_ControlPosition_WindowTab_WindowOptionsEdit()
		This.Set_ControlPosition_WindowTab_WindowTitleText()
		This.Set_ControlPosition_WindowTab_WindowTitleEdit()
		
		This.Set_ControlPosition_WindowTab_WindowDefaultsText()
		This.Set_ControlPosition_WindowTab_WindowDefaultsEdit()
		
		This.Set_ControlPosition_WindowTab_WindowFunctionParamsText()
		This.Set_ControlPosition_WindowTab_WindowFunctionParamsEdit()
		
		This.Set_ControlPosition_WindowTab_ClipWindowCallButton()
		This.Set_ControlPosition_WindowTab_WindowCallPrototypeText()
		
		
		This.Set_ControlPosition_WindowTab_UpdateWindowDefaultsButton()
		This.Set_ControlPosition_WindowTab_RunTestWindowButton()
		This.Set_ControlPosition_WindowTab_MakeDemoWindowChildCheckBox()
	}
	Set_ControlPosition_WindowTab_TabToggleButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.TabToggleButton
		cc.X := xm
		cc.Y := ym
		cc.W := window.W - 2 * xm
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowsListBox(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowsListBox
		local dd := controls.TabToggleButton
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 440
		cc.H := 180
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_NewWindowButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.NewWindowButton
		local dd := controls.WindowsListBox
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 140
		cc.H := 30
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_CopyWindowButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.CopyWindowButton
		local dd := controls.NewWindowButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_DeleteWindowButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.DeleteWindowButton
		local dd := controls.CopyWindowButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_OpenProjectFolderButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.OpenProjectFolderButton
		local dd := controls.DeleteWindowButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X
		cc.Y := dd.Y + dd.H +ym
		cc.W := dd.W 
		cc.H := dd.H
		window.MoveControl(cc)
		;~ local window := This.WindowTab
		;~ local controls := window.Controls
		;~ local cc := controls.OpenProjectFolderButton
		;~ local dd := controls.WindowsListBox
		;~ cc.X := window.MarginX
		;~ cc.Y := dd.Y + dd.H ;+ window.MarginY
		;~ cc.W := dd.W / 2 + 70
		;~ cc.H := 30
		;~ window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_OpenWindowsFolderButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.OpenWindowsFolderButton
		local dd := controls.OpenProjectFolderButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
		;~ local window := This.WindowTab
		;~ local controls := window.Controls
		;~ local cc := controls.OpenWindowsFolderButton
		;~ local dd := controls.OpenProjectFolderButton
		;~ cc.X := dd.X + dd.W + window.MarginX
		;~ cc.Y := dd.Y
		;~ cc.W := dd.W
		;~ cc.H := dd.H
		;~ window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowTypeText(){
		local window := This.WindowTab
		local cc := window.Controls.WindowTypeText
		local dd := window.Controls.WindowsListBox
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		cc.H := 22
		window.MoveControl(cc)
		;~ local window := This.WindowTab
		;~ local cc := window.Controls.WindowTypeText
		;~ local dd := window.Controls.OpenProjectFolderButton
		;~ cc.X := window.MarginX
		;~ cc.Y := dd.Y + dd.H + window.MarginY
		;~ cc.W := 120
		;~ cc.H := 22
		;~ window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowTypeDDL(){
		local window := This.WindowTab
		local cc := window.Controls.WindowTypeDDL
		local dd := window.Controls.WindowTypeText
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := window.W - (cc.X + 2 * window.MarginX)
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowNameText(){
		local window := This.WindowTab
		local cc := window.Controls.WindowNameText
		local dd := window.Controls.WindowTypeDDL
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		;~ cc.H := 22
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowNameEdit(){
		local window := This.WindowTab
		local cc := window.Controls.WindowNameEdit
		local dd := window.Controls.WindowNameText
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := window.W - (cc.X + 2 * window.MarginX)
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowOptionsText(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowOptionsText
		local dd := controls.WindowNameEdit
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowOptionsEdit(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowOptionsEdit
		local dd := controls.WindowOptionsText
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := window.W - (cc.X + 2 * window.MarginX)
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowTitleText(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowTitleText
		local dd := controls.WindowOptionsEdit
		cc.X := window.MarginX 
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowTitleEdit(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowTitleEdit
		local dd := controls.WindowTitleText
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y 
		cc.W := window.W - (cc.X + 2 * window.MarginX)
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowDefaultsText(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowDefaultsText
		local dd := controls.WindowTitleEdit
		cc.X := window.MarginX 
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowDefaultsEdit(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowDefaultsEdit
		local dd := controls.WindowDefaultsText
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y 
		cc.W := window.W - (cc.X + 2 * window.MarginX)
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowFunctionParamsText(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowFunctionParamsText
		local dd := controls.WindowDefaultsEdit
		cc.X := window.MarginX 
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_WindowFunctionParamsEdit(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowFunctionParamsEdit
		local dd := controls.WindowFunctionParamsText
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y 
		cc.W := window.W - (cc.X + 2 * window.MarginX)
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	
	
	Set_ControlPosition_WindowTab_ClipWindowCallButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.ClipWindowCallButton
		local dd := controls.WindowFunctionParamsText
		local ee := controls.WindowFunctionParamsEdit
		cc.X := dd.X
		cc.Y := ee.Y + ee.H + window.MarginY
		cc.W := 150
		cc.H := ee.H
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	
	Set_ControlPosition_WindowTab_WindowCallPrototypeText(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.WindowCallPrototypeText
		local dd := controls.ClipWindowCallButton
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := Window.W - ( dd.W + 3 * window.MarginX )
		cc.H := dd.H
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	
	
	Set_ControlPosition_WindowTab_UpdateWindowDefaultsButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.UpdateWindowDefaultsButton
		local dd := controls.ClipWindowCallButton
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY * 2
		cc.W := 150
		cc.H := 30
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_RunTestWindowButton(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.RunTestWindowButton
		local dd := controls.UpdateWindowDefaultsButton
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y 
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowTab_MakeDemoWindowChildCheckBox(){
		local window := This.WindowTab
		local controls := window.Controls
		local cc := controls.MakeDemoWindowChildCheckBox
		local dd := controls.UpdateWindowDefaultsButton
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY / 2
		;~ cc.W := 150
		cc.H := 30
		window.MoveControl(cc)
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;BitmapTab controls
	Set_AllControl_Positions_BitmapTab(){
		; Your code for setting all control positions for the BitmapTab goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ClassTab controls
	Set_AllControl_Positions_ClassTab(){
		; Your code for setting all control positions for the ClassTab goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;FunctionTab controls
	Set_AllControl_Positions_FunctionTab(){
		This.Set_ControlPosition_FunctionTab_TabToggleButton()
		This.Set_ControlPosition_FunctionTab_FunctionListbox()
		This.Set_ControlPosition_FunctionTab_AddNewFunctionButton()
		This.Set_ControlPosition_FunctionTab_DeleteFunctionButton()
		This.Set_ControlPosition_FunctionTab_Param1Text()
		This.Set_ControlPosition_FunctionTab_Param1Edit()
		This.Set_ControlPosition_FunctionTab_Param2Text()
		This.Set_ControlPosition_FunctionTab_Param2Edit()
		This.Set_ControlPosition_FunctionTab_Param3Text()
		This.Set_ControlPosition_FunctionTab_Param3Edit()
		This.Set_ControlPosition_FunctionTab_UpdateFunctionButton()
		This.Set_ControlPosition_FunctionTab_OpenInNotepadButton()
		This.Set_ControlPosition_FunctionTab_OpenInDefaultEditorButton()
		
	}
	Set_ControlPosition_FunctionTab_TabToggleButton(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.TabToggleButton
		cc.X := window.MarginX
		cc.Y := window.MarginY
		cc.W := window.W - 2 * window.MarginX
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_FunctionTab_FunctionListbox(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.FunctionListbox
		local dd := controls.TabToggleButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		cc.W := 440
		cc.H := 210
		window.MoveControl(cc)
	}
	Set_ControlPosition_FunctionTab_AddNewFunctionButton(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.AddNewFunctionButton
		local dd := controls.FunctionListbox
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y 
		cc.W := 140
		cc.H := 30
		window.MoveControl(cc)
	}
	Set_ControlPosition_FunctionTab_DeleteFunctionButton(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.DeleteFunctionButton
		local dd := controls.AddNewFunctionButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_FunctionTab_Param1Text(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.Param1Text
		local dd := controls.FunctionListbox
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_FunctionTab_Param1Edit(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.Param1Edit
		local textControl := controls.Param1Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_FunctionTab_Param2Text(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.Param2Text
		local dd := controls.Param1Text
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 130
		cc.H := 60
		window.MoveControl(cc)
	}
	Set_ControlPosition_FunctionTab_Param2Edit(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.Param2Edit
		local textControl := controls.Param2Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y
		cc.W := totalWidth
		cc.H := 60
		window.MoveControl( cc )
	}
	Set_ControlPosition_FunctionTab_Param3Text(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.Param3Text
		local dd := controls.Param2Text
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 130
		cc.H := 190
		window.MoveControl(cc)
	}
	Set_ControlPosition_FunctionTab_Param3Edit(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.Param3Edit
		local textControl := controls.Param3Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y
		cc.W := totalWidth
		cc.H := 190
		window.MoveControl( cc )
	}
	Set_ControlPosition_FunctionTab_UpdateFunctionButton(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.UpdateFunctionButton
		local textControl := controls.Param3Text
		
		cc.X := window.MarginX
		cc.Y := textControl.Y + textControl.H + window.MarginY
		cc.W := 180
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_ControlPosition_FunctionTab_OpenInNotepadButton(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.OpenInNotepadButton
		local textControl := controls.UpdateFunctionButton
		
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y 
		cc.W := textControl.W
		cc.H := textControl.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_FunctionTab_OpenInDefaultEditorButton(){
		local window := This.FunctionTab
		local controls := window.Controls
		local cc := controls.OpenInDefaultEditorButton
		local textControl := controls.OpenInNotepadButton
		
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y 
		cc.W := textControl.W
		cc.H := textControl.H
		window.MoveControl( cc )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;LabelTab controls
	Set_AllControl_Positions_LabelTab(){
		This.Set_ControlPosition_LabelTab_TabToggleButton()
	}
	Set_ControlPosition_LabelTab_TabToggleButton(){
		local window := This.LabelTab
		local controls := window.Controls
		local cc := controls.TabToggleButton
		cc.X := window.MarginX
		cc.Y := window.MarginY
		cc.W := window.W - 2 * window.MarginX
		cc.H := 20
		window.MoveControl(cc)
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ScriptTab controls
	Set_AllControl_Positions_ScriptTab(){
		This.Set_ControlPosition_ScriptTab_TabToggleButton()
		This.Set_ControlPosition_ScriptTab_ScriptInsertTypeListbox()
		This.Set_ControlPosition_ScriptTab_AvailableScriptInsertsListbox()
		This.Set_ControlPosition_ScriptTab_AddScriptElementButton()
		This.Set_ControlPosition_ScriptTab_OutputListview()
		This.Set_ControlPosition_ScriptTab_RemoveScriptElementButton()
		This.Set_ControlPosition_ScriptTab_MoveScriptElementUpButton()
		This.Set_ControlPosition_ScriptTab_MoveScriptElementDownButton()
		This.Set_ControlPosition_ScriptTab_MoveScriptElementTopButton()
		This.Set_ControlPosition_ScriptTab_MoveScriptElementBottomButton()
		This.Set_ControlPosition_ScriptTab_InsertScriptElementAtButton()
		This.Set_ControlPosition_ScriptTab_InsertScriptElementAtEdit()
		This.Set_ControlPosition_ScriptTab_FocusScriptElementButton()
		This.Set_ControlPosition_ScriptTab_SaveScriptButton()
		This.Set_ControlPosition_ScriptTab_RunAndSaveScriptButton()
		This.Set_ControlPosition_ScriptTab_OpenScriptInEditorButton()
		This.Set_ControlPosition_ScriptTab_SaveAsButton()
	}
	Set_ControlPosition_ScriptTab_TabToggleButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.TabToggleButton
		cc.X := window.MarginX
		cc.Y := window.MarginY
		cc.W := window.W - 2 * window.MarginX
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_ScriptInsertTypeListbox(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.ScriptInsertTypeListbox
		local dd := controls.TabToggleButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		cc.W := 220
		cc.H := 200
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_AvailableScriptInsertsListbox(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.AvailableScriptInsertsListbox
		local dd := controls.ScriptInsertTypeListbox
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y 
		cc.W := dd.W
		cc.H := 200
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_AddScriptElementButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.AddScriptElementButton
		local dd := controls.AvailableScriptInsertsListbox
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y 
		cc.W := 140
		cc.H := 30
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_OutputListview(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.OutputListview
		local dd := controls.ScriptInsertTypeListbox
		local ee := controls.AvailableScriptInsertsListbox
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W + xm + ee.W
		cc.H := 400
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_RemoveScriptElementButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.RemoveScriptElementButton
		local dd := controls.OutputListview
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x + dd.W + xm
		cc.Y := dd.Y 
		cc.W := 140
		;~ cc.H := 30
		cc.H := 24
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_MoveScriptElementUpButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.MoveScriptElementUpButton
		local dd := controls.RemoveScriptElementButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_MoveScriptElementDownButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.MoveScriptElementDownButton
		local dd := controls.MoveScriptElementUpButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_MoveScriptElementTopButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.MoveScriptElementTopButton
		local dd := controls.MoveScriptElementDownButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_MoveScriptElementBottomButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.MoveScriptElementBottomButton
		local dd := controls.MoveScriptElementTopButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_InsertScriptElementAtButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.InsertScriptElementAtButton
		local dd := controls.MoveScriptElementBottomButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W - 50
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_InsertScriptElementAtEdit(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.InsertScriptElementAtEdit
		local dd := controls.InsertScriptElementAtButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x + dd.W + xm
		cc.Y := dd.Y 
		cc.W := 50 - xm
		;~ cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_FocusScriptElementButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.FocusScriptElementButton
		local dd := controls.InsertScriptElementAtButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W + 50
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_SaveScriptButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.SaveScriptButton
		local dd := controls.FocusScriptElementButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_RunAndSaveScriptButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.RunAndSaveScriptButton
		local dd := controls.SaveScriptButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_OpenScriptInEditorButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.OpenScriptInEditorButton
		local dd := controls.RunAndSaveScriptButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_ScriptTab_SaveAsButton(){
		local window := This.ScriptTab
		local controls := window.Controls
		local cc := controls.SaveAsButton
		local dd := controls.OpenScriptInEditorButton
		
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.x 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;WindowElementTab controls
	Set_AllControl_Positions_WindowElementTab(){
		This.Set_ControlPosition_WindowElementTab_TabToggleButton()
		This.Set_ControlPosition_WindowElementTab_ElementDDL()
		This.Set_ControlPosition_WindowElementTab_WindowElementsListView()
		This.Set_ControlPosition_WindowElementTab_NewElementButton()
		This.Set_ControlPosition_WindowElementTab_CopyElementButton()
		This.Set_ControlPosition_WindowElementTab_MoveElementUpButton()
		This.Set_ControlPosition_WindowElementTab_MoveElementDownButton()
		This.Set_ControlPosition_WindowElementTab_MoveElementToTopButton()
		This.Set_ControlPosition_WindowElementTab_MoveElementToBottomButton()
		This.Set_ControlPosition_WindowElementTab_InsertAtButton()
		This.Set_ControlPosition_WindowElementTab_InsertAtEdit()
		
		This.Set_ControlPosition_WindowElementTab_DeleteElementButton()
		This.Set_ControlPosition_WindowElementTab_AutoClearDefaultsCheckbox()
		This.Set_ControlPosition_WindowElementTab_AutoSaveCheckbox()
		This.Set_ControlPosition_WindowElementTab_AutoSaveIntervalDDL()
		
		
		This.Set_ControlPosition_WindowElementTab_ClipOutputStringText()
		This.Set_ControlPosition_WindowElementTab_OutputStringText()
		
		This.Set_ControlPosition_WindowElementTab_Param1Text()
		This.Set_ControlPosition_WindowElementTab_Param1Edit()
		This.Set_ControlPosition_WindowElementTab_Param1Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param2Text()
		This.Set_ControlPosition_WindowElementTab_Param2Edit()
		This.Set_ControlPosition_WindowElementTab_Param2Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param3Text()
		This.Set_ControlPosition_WindowElementTab_Param3Edit()
		This.Set_ControlPosition_WindowElementTab_Param3Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param4Text()
		This.Set_ControlPosition_WindowElementTab_Param4Edit()
		This.Set_ControlPosition_WindowElementTab_Param4Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param5Text()
		This.Set_ControlPosition_WindowElementTab_Param5Edit()
		This.Set_ControlPosition_WindowElementTab_Param5Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param6Text()
		This.Set_ControlPosition_WindowElementTab_Param6Edit()
		This.Set_ControlPosition_WindowElementTab_Param6Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param7Text()
		This.Set_ControlPosition_WindowElementTab_Param7Edit()
		This.Set_ControlPosition_WindowElementTab_Param7Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param8Text()
		This.Set_ControlPosition_WindowElementTab_Param8Edit()
		This.Set_ControlPosition_WindowElementTab_Param8Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param9Text()
		This.Set_ControlPosition_WindowElementTab_Param9Edit()
		This.Set_ControlPosition_WindowElementTab_Param9Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param10Text()
		This.Set_ControlPosition_WindowElementTab_Param10Edit()
		This.Set_ControlPosition_WindowElementTab_Param10Checkbox()

		This.Set_ControlPosition_WindowElementTab_Param11Text()
		This.Set_ControlPosition_WindowElementTab_Param11Edit()
		This.Set_ControlPosition_WindowElementTab_Param11Checkbox()
		
		This.Set_ControlPosition_WindowElementTab_TestWindowButton()
		This.Set_ControlPosition_WindowElementTab_ClearAllParamsButton()
		This.Set_ControlPosition_WindowElementTab_SaveWindowButton()
		This.Set_ControlPosition_WindowElementTab_OpenWindowCodeInEditorButton()
		This.Set_ControlPosition_WindowElementTab_ClipboardWindowFunctionButton()
		This.Set_ControlPosition_WindowElementTab_OpenWindowIniFileButton()

	}
	Set_ControlPosition_WindowElementTab_TabToggleButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.TabToggleButton
		cc.X := window.MarginX
		cc.Y := window.MarginY
		cc.W := window.W - 2 * window.MarginX
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_ElementDDL(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.ElementDDL
		local dd := controls.TabToggleButton
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		;~ cc.W := 500
		cc.W := 560
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_WindowElementsListView(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.WindowElementsListView
		local dd := controls.ElementDDL
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		;~ cc.W := 500
		cc.W := 560
		;~ cc.H := 500
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_NewElementButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.NewElementButton
		local dd := controls.ElementDDL
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y 
		cc.W := 120
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_WindowElementTab_CopyElementButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.CopyElementButton
		local dd := controls.NewElementButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_MoveElementUpButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.MoveElementUpButton
		local dd := controls.CopyElementButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_MoveElementDownButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.MoveElementDownButton
		local dd := controls.MoveElementUpButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_WindowElementTab_MoveElementToTopButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.MoveElementToTopButton
		local dd := controls.MoveElementDownButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_WindowElementTab_MoveElementToBottomButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.MoveElementToBottomButton
		local dd := controls.MoveElementToTopButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_WindowElementTab_InsertAtButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.InsertAtButton
		local dd := controls.MoveElementToBottomButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W - 40
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_WindowElementTab_InsertAtEdit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.InsertAtEdit
		local dd := controls.InsertAtButton
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y 
		cc.W := 40 - window.MarginX
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_WindowElementTab_DeleteElementButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.DeleteElementButton
		local dd := controls.InsertAtButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		cc.H := dd.H
		window.MoveControl( cc )
	}
	Set_ControlPosition_WindowElementTab_AutoClearDefaultsCheckbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.AutoClearDefaultsCheckbox
		local dd := controls.DeleteElementButton
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_AutoSaveCheckbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.AutoSaveCheckbox
		local dd := controls.AutoClearDefaultsCheckbox
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 50
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_AutoSaveIntervalDDL(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.AutoSaveIntervalDDL
		local dd := controls.AutoSaveCheckbox
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 65
		cc.H := 20
		window.MoveControl(cc)
		;~ MsgBox, % cc.X "`n" dd.X "`n" dd.W
	}
	Set_ControlPosition_WindowElementTab_ClipOutputStringText(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.ClipOutputStringText
		local dd := controls.WindowElementsListView
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 90
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_OutputStringText(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.OutputStringText
		local dd := controls.ClipOutputStringText
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y 
		cc.W := window.W - ( 3 * window.MarginX + dd.X + dd.W )
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param1Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param1Text
		local dd := controls.OutputStringText
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param1Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param1Edit
		local textControl := controls.Param1Text
		local checkboxControl := controls.Param1Checkbox
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_WindowElementTab_Param1Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param1Checkbox
		local editControl := controls.Param1Edit
		cc.X := editControl.X + editControl.W + window.MarginX
		cc.Y := editControl.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param2Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param2Text
		cc.X := window.MarginX
		cc.Y := controls.Param1Text.Y + controls.Param1Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param2Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param2Edit
		local dd := controls.Param2Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y 
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param2Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param2Checkbox
		local dd := controls.Param2Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param3Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param3Text
		cc.X := window.MarginX
		cc.Y := controls.Param2Text.Y + controls.Param2Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param3Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param3Edit
		local dd := controls.Param3Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param3Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param3Checkbox
		local dd := controls.Param3Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param4Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param4Text
		cc.X := window.MarginX
		cc.Y := controls.Param3Text.Y + controls.Param3Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param4Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param4Edit
		local dd := controls.Param4Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param4Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param4Checkbox
		local dd := controls.Param4Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param5Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param5Text
		cc.X := window.MarginX
		cc.Y := controls.Param4Text.Y + controls.Param4Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param5Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param5Edit
		local dd := controls.Param5Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param5Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param5Checkbox
		local dd := controls.Param5Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param6Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param6Text
		cc.X := window.MarginX
		cc.Y := controls.Param5Text.Y + controls.Param5Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param6Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param6Edit
		local dd := controls.Param6Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param6Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param6Checkbox
		local dd := controls.Param6Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param7Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param7Text
		cc.X := window.MarginX
		cc.Y := controls.Param6Text.Y + controls.Param6Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param7Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param7Edit
		local dd := controls.Param7Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param7Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param7Checkbox
		local dd := controls.Param7Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param8Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param8Text
		cc.X := window.MarginX
		cc.Y := controls.Param7Text.Y + controls.Param7Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param8Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param8Edit
		local dd := controls.Param8Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param8Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param8Checkbox
		local dd := controls.Param8Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param9Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param9Text
		cc.X := window.MarginX
		cc.Y := controls.Param8Text.Y + controls.Param8Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param9Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param9Edit
		local dd := controls.Param9Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param9Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param9Checkbox
		local dd := controls.Param9Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param10Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param10Text
		cc.X := window.MarginX
		cc.Y := controls.Param9Text.Y + controls.Param9Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param10Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param10Edit
		local dd := controls.Param10Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param10Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param10Checkbox
		local dd := controls.Param10Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param11Text(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param11Text
		cc.X := window.MarginX
		cc.Y := controls.Param10Text.Y + controls.Param10Text.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param11Edit(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param11Edit
		local dd := controls.Param11Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_Param11Checkbox(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.Param11Checkbox
		local dd := controls.Param11Edit
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 15
		cc.H := 15
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_TestWindowButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.TestWindowButton
		local dd := controls.Param11Text
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + ym
		cc.W := 150
		cc.H := 30
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_ClearAllParamsButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.ClearAllParamsButton
		local dd := controls.TestWindowButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_SaveWindowButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.SaveWindowButton
		local dd := controls.ClearAllParamsButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_OpenWindowCodeInEditorButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.OpenWindowCodeInEditorButton
		local dd := controls.TestWindowButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X 
		cc.Y := dd.Y + dd.H + ym
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_ClipboardWindowFunctionButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.ClipboardWindowFunctionButton
		local dd := controls.OpenWindowCodeInEditorButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	Set_ControlPosition_WindowElementTab_OpenWindowIniFileButton(){
		local window := This.WindowElementTab
		local controls := window.Controls
		local cc := controls.OpenWindowIniFileButton
		local dd := controls.ClipboardWindowFunctionButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := dd.W
		cc.H := dd.H
		window.MoveControl(cc)
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;BitmapElementTab controls
	Set_AllControl_Positions_BitmapElementTab(){
		; Your code for setting all control positions for the BitmapElementTab goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;CodeInsertTab controls
	Set_AllControl_Positions_CodeInsertTab(){
		This.Set_ControlPosition_CodeInsertTab_TabToggleButton()
		This.Set_ControlPosition_CodeInsertTab_CodeInsertListbox()
		This.Set_ControlPosition_CodeInsertTab_SectionNameText()
		This.Set_ControlPosition_CodeInsertTab_SectionNameDDL()
		This.Set_ControlPosition_CodeInsertTab_NewCodeInsertButton()
		This.Set_ControlPosition_CodeInsertTab_CopyCodeInsertButton()
		This.Set_ControlPosition_CodeInsertTab_Param1Text()
		This.Set_ControlPosition_CodeInsertTab_Param1Edit()
		This.Set_ControlPosition_CodeInsertTab_Param2Text()
		This.Set_ControlPosition_CodeInsertTab_Param2Edit()
		This.Set_ControlPosition_CodeInsertTab_Param3Text()
		This.Set_ControlPosition_CodeInsertTab_Param3Edit()
		
		
		This.Set_ControlPosition_CodeInsertTab_NewSectionButton()
		This.Set_ControlPosition_CodeInsertTab_SectionText()
		This.Set_ControlPosition_CodeInsertTab_SectionDDL()
		This.Set_ControlPosition_CodeInsertTab_UpdateCodeInsertButton()
		This.Set_ControlPosition_CodeInsertTab_OpenInNotepadButton()
		This.Set_ControlPosition_CodeInsertTab_OpenInDefaultEditorButton()
	}
	Set_ControlPosition_CodeInsertTab_TabToggleButton(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.TabToggleButton
		cc.X := xm
		cc.Y := ym
		cc.W := window.W - 2 * xm
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_CodeInsertListbox(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local xm := window.MarginX
		local ym := window.MarginY
		local cc := controls.CodeInsertListbox
		local dd := controls.TabToggleButton
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		cc.W := 560
		cc.H := 180
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_SectionNameText(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.SectionNameText
		local dd := controls.CodeInsertListbox
		cc.X := dd.X + dd.W + window.MarginX
		cc.Y := dd.Y
		cc.W := 120
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_SectionNameDDL(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.SectionNameDDL
		local dd := controls.SectionNameText
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		;~ cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_NewCodeInsertButton(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.NewCodeInsertButton
		local dd := controls.SectionNameDDL
		cc.X := dd.X
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 120
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_CopyCodeInsertButton(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.CopyCodeInsertButton
		local dd := controls.NewCodeInsertButton
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X 
		cc.Y := dd.Y + dd.H + ym
		cc.W := 120
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_Param1Text(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.Param1Text
		local dd := controls.CodeInsertListbox
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 130
		cc.H := 20
		window.MoveControl(cc)
	}
	Set_ControlPosition_CodeInsertTab_Param1Edit(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.Param1Edit
		local textControl := controls.Param1Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y
		cc.W := totalWidth
		cc.H := 20
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_Param2Text(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.Param2Text
		local dd := controls.Param1Text
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 130
		cc.H := 60
		window.MoveControl(cc)
	}
	Set_ControlPosition_CodeInsertTab_Param2Edit(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.Param2Edit
		local textControl := controls.Param2Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y
		cc.W := totalWidth
		cc.H := 60
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_Param3Text(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.Param3Text
		local dd := controls.Param2Text
		cc.X := window.MarginX
		cc.Y := dd.Y + dd.H + window.MarginY
		cc.W := 130
		cc.H := 190
		window.MoveControl(cc)
	}
	Set_ControlPosition_CodeInsertTab_Param3Edit(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.Param3Edit
		local textControl := controls.Param3Text
		local totalWidth := window.W - 3 * window.MarginX - 130 - 15  ; Total width minus the sum of the fixed widths and the margins
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y
		cc.W := totalWidth
		cc.H := 190
		window.MoveControl( cc )
	}
	
	Set_ControlPosition_CodeInsertTab_NewSectionButton(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.NewSectionButton
		local textControl := controls.Param3Text
		
		cc.X := window.MarginX
		cc.Y := textControl.Y + textControl.H + window.MarginY
		cc.W := 40 - 2 * window.MarginX
		cc.H := 30
		window.MoveControl( cc )
	}
	
	Set_ControlPosition_CodeInsertTab_SectionText(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.SectionText
		local textControl := controls.NewSectionButton
		local dd := controls.NewSectionButton
		
		cc.X := window.MarginX + 40
		cc.Y := dd.Y
		cc.W := 200 - 40 - 50
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_SectionDDL(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.SectionDDL
		local textControl := controls.SectionText
		local dd := controls.SectionText
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := dd.Y
		cc.W := 130
		cc.H := 30
		window.MoveControl( cc )
	}
	
	Set_ControlPosition_CodeInsertTab_UpdateCodeInsertButton(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.UpdateCodeInsertButton
		local textControl := controls.SectionDDL
		
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y 
		cc.W := 120
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_OpenInNotepadButton(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.OpenInNotepadButton
		local textControl := controls.UpdateCodeInsertButton
		
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y 
		cc.W := 120
		cc.H := 30
		window.MoveControl( cc )
	}
	Set_ControlPosition_CodeInsertTab_OpenInDefaultEditorButton(){
		local window := This.CodeInsertTab
		local controls := window.Controls
		local cc := controls.OpenInDefaultEditorButton
		local textControl := controls.OpenInNotepadButton
		
		cc.X := textControl.X + textControl.W + window.MarginX
		cc.Y := textControl.Y 
		cc.W := 120
		cc.H := 30
		window.MoveControl( cc )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;ClassElementTab controls
	Set_AllControl_Positions_ClassElementTab(){
		; Your code for setting all control positions for the ClassElementTab goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;FunctionElementTab controls
	Set_AllControl_Positions_FunctionElementTab(){
		; Your code for setting all control positions for the FunctionElementTab goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;LabelElementTab controls
	Set_AllControl_Positions_LabelElementTab(){
		; Your code for setting all control positions for the LabelElementTab goes ... ... here
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;VarableTab controls
	Set_AllControl_Positions_VarableTab(){
		; Your code for setting all control positions for the VarableTab goes here
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class WindowSetupClass extends WindowPositionsClass {
	
	Setup_MainWindow(){
		local currentWorkArea := MonitorClass.GetMonitorWorkArea( MonitorClass.MonitorPrimary )
		local obj := {}
		obj.X 				:= currentWorkArea.X
		obj.Y 				:= currentWorkArea.Y
		obj.W 				:= currentWorkArea.W
		obj.H 				:= currentWorkArea.H
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		obj.Color 			:= "22262a"
		obj.ControlColor 	:= "32363a"
		obj.MinWidth		:= 560
		obj.MinHeight		:= 275
		obj.MaxWidth		:= obj.W
		obj.MaxHeight		:= obj.H
		obj.ToggleWidth		:= obj.MinWidth
		obj.ToggleHeight	:= obj.MinHeight
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		This.MainWindow := New PopUpWindow_V3( "-DPIScale -Caption" , "HB Bitmap Maker v7" ,, obj )
	}
	Setup_MainShellWindow(){
		local obj := {}
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		obj.Color 			:= "880000"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		This.MainShellWindow := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.MainWindow.Hwnd , "MAINSHELLWINDOW" ,, obj )
	}
	Setup_MainInnerWindow(){
		local obj := {}
		;~ obj.W 				:= 600
		obj.W 				:= 2000
		;~ obj.H				:= 600
		obj.H				:= 2000
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.Color 			:= "88FF00"
		;~ obj.Color 			:= "22262a"
		obj.Color 			:= "12161a"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		This.MainInnerWindow := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.MainShellWindow.Hwnd , "MAININNERWINDOW" ,, obj )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	Setup_ProjectsMainWindow(){
		local obj := {}
		obj.W 				:= 639
		;~ obj.X 				:= A_ScreenWidth - obj.W - 20
		obj.X 				:= 130
		obj.Y 				:= 90
		obj.H 				:= 750
		obj.MarginX 		:= 3
		obj.MarginY 		:= 3
		;~ obj.Color 			:= "12161a"
		obj.Color 			:= "660000"
		obj.ControlColor 	:= "32363a"
		obj.MinWidth		:= 190
		obj.MinHeight		:= 55
		obj.MaxWidth		:= obj.W
		obj.MaxHeight		:= obj.H
		obj.ToggleWidth		:= obj.MinWidth
		obj.ToggleHeight	:= obj.MinHeight
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		;~ obj.ProjectsWindowToggle := 0
		This.ProjectsMainWindow := New PopUpWindow_V3( "-DPIScale -Caption +Owner" This.MainWindow.Hwnd , "ProjectsPanel" ,, obj )
	}
	Setup_ProjectsShellWindow(){
		local obj := {}
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		obj.Color 			:= "880000"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		This.ProjectsShellWindow := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsMainWindow.Hwnd , "PROJECTSSHELLWINDOW" ,, obj )
	}
	Setup_ProjectsInnerWindow(){
		local obj := {}
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		obj.W				:= 610
		;~ obj.H				:= 500
		obj.H				:= 900
		obj.Color 			:= "440000"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		This.ProjectsInnerWindow := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsShellWindow.Hwnd , "PROJECTSINNERWINDOW" ,, obj )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	Setup_ElementsMainWindow(){
		local obj := {}
		obj.W 				:= 750
		obj.X 				:= A_ScreenWidth - obj.W - 20
		obj.Y 				:= 130
		obj.H 				:= 700
		obj.MarginX 		:= 3
		obj.MarginY 		:= 3
		;~ obj.Color 			:= "32363a"
		obj.Color 			:= "003333"
		obj.ControlColor 	:= "32363a"
		obj.MinWidth		:= 190
		obj.MinHeight		:= 55
		obj.MaxWidth		:= obj.W
		obj.MaxHeight		:= obj.H
		obj.ToggleWidth		:= obj.MinWidth
		obj.ToggleHeight	:= obj.MinHeight
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "00FF00"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 0
		;~ obj.ElementsWindowToggle := 0
		This.ElementsMainWindow := New PopUpWindow_V3( "-DPIScale -Caption +Owner" This.MainWindow.Hwnd , "ElementsPanel" ,, obj )
		
	}
	Setup_ElementsShellWindow(){
		local obj := {}
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		obj.Color 			:= "22262a"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		This.ElementsShellWindow := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ElementsMainWindow.Hwnd , "ELEMENTSSHELLWINDOW" ,, obj )
	}
	Setup_ElementsInnerWindow(){
		local obj := {}
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.W				:= 645
		obj.W				:= 720
		;~ obj.H				:= 500
		obj.H				:= 800
		;~ obj.Color 			:= "02060a"
		obj.Color 			:= "002222"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		This.ElementsInnerWindow := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ElementsShellWindow.Hwnd , "ElementsINNERWINDOW" ,, obj )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	Setup_ProjectTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		obj.W 				:= 600
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		obj.Color 			:= "02060a"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 1
		obj.ToggleMaxSize := 245
		obj.ToggleMinSize := 30
		
		This.ProjectTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsInnerWindow.Hwnd , "PROJECTTAB" ,, obj )
	}
	Setup_WindowTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		obj.W 				:= 600
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.Color 			:= "12161a"
		obj.Color 			:= "002f5f"
		;~ obj.Color 			:= "440000"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 1
		obj.ToggleMaxSize := 500
		obj.ToggleMinSize := 30
		
		This.WindowTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsInnerWindow.Hwnd , "WINDOWTAB" ,, obj )
	}
	Setup_BitmapTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		obj.W 				:= 600
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.Color 			:= "02060a"
		obj.Color 			:= "004444"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 0
		obj.ToggleMaxSize := 245
		obj.ToggleMinSize := 30
		
		This.BitmapTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsInnerWindow.Hwnd , "BITMAPTAB" ,, obj )
	}
	Setup_ClassTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		obj.W 				:= 600
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.Color 			:= "02060a"
		obj.Color 			:= "00a200"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 0
		obj.ToggleMaxSize := 245
		obj.ToggleMinSize := 30
		
		This.ClassTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsInnerWindow.Hwnd , "CLASSTAB" ,, obj )
	}
	Setup_FunctionTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		obj.W 				:= 600
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.Color 			:= "02060a"
		obj.Color 			:= "804040"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 1
		obj.ToggleMaxSize := 620
		obj.ToggleMinSize := 30
		
		This.FunctionTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsInnerWindow.Hwnd , "FUNCTIONTAB" ,, obj )
	}
	Setup_LabelTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		obj.W 				:= 600
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.Color 			:= "02060a"
		obj.Color 			:= "A31DE2"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 0
		obj.ToggleMaxSize := 245
		obj.ToggleMinSize := 30
		
		This.LabelTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsInnerWindow.Hwnd , "LABELTAB" ,, obj )
	}
	Setup_ScriptTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		obj.W 				:= 600
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.Color 			:= "02060a"
		obj.Color 			:= "8080FF"
		obj.ControlColor 	:= "32363a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "FFFFFF"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 1
		obj.ToggleMaxSize := 650
		obj.ToggleMinSize := 30
		
		This.ScriptTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ProjectsInnerWindow.Hwnd , "SCRIPTTAB" ,, obj )
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	Setup_WindowElementTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		;~ obj.W 				:= 635
		obj.W 				:= 700
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		obj.Color 			:= "12161a"
		;~ obj.Color 			:= "004422"
		obj.ControlColor 	:= "02060a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "ffffff"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 1
		obj.ToggleMaxSize := 720
		obj.ToggleMinSize := 30
		
		This.WindowElementTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ElementsInnerWindow.Hwnd , "WINDOWELEMENTTAB" ,, obj )
	}
	Setup_BitmapElementTab(){
		
	}
	Setup_CodeInsertTab(){
		local obj := {}
		obj.X 				:= 0
		obj.Y 				:= 0
		;~ obj.W 				:= 635
		obj.W 				:= 700
		obj.H 				:= 30
		obj.MarginX 		:= 5
		obj.MarginY 		:= 5
		;~ obj.Color 			:= "ff0000"
		obj.Color 			:= "004422"
		obj.ControlColor 	:= "02060a"
		obj.FontType 		:= "Segoe UI"
		obj.FontSize 		:= 9
		obj.FontColor 		:= "ffffff"
		obj.FontOptions 	:= ""
		obj.AutoShow		:= 1
		
		obj.ToggleState := 1
		obj.ToggleMaxSize := 550
		obj.ToggleMinSize := 30
		
		This.CodeInsertTab := New PopUpWindow_V3( "-DPIScale -Caption +Parent" This.ElementsInnerWindow.Hwnd , "CODEINSERTTAB" ,, obj )
	}
	Setup_ClassElementTab(){
		
	}
	Setup_FunctionElementTab(){
		
	}
	Setup_LabelElementTab(){
		
	}
	Setup_VariableTab(){
		
	}
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class WindowPositionsClass extends ControlsSetupClass	{
	
	Set_WindowPosition_MainWindow(){
		This.Set_AllControl_Positions_MainWindow()
		This.Set_WindowPosition_MainShellWindow()
		This.Set_MainWindow_Sliders()
		This.MainWindow.Show()
	}
	Set_WindowPosition_MainShellWindow(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := This.MainShellWindow
		local dd := controls.ControlArea
		local ee := controls.VertSlider
		local ff := controls.HorzSlider
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := dd.X + dd.W + xm
		cc.Y := ym
		cc.W := window.W - ( cc.X + ee.W + 2 * xm )
		cc.H := window.H - ( cc.Y + ff.H + 2 * ym )
		cc.Show()
	}
	Set_WindowPosition_MainInnerWindow(){
		local window := This.MainWindow
		local controls := window.Controls
		local cc := This.MainInnerWindow
		local dd := controls.VertSlider
		local ee := controls.HorzSlider
		cc.X := window.Get( ee ) * -1
		cc.Y := window.Get( dd ) * -1
		cc.SetPosition()
		cc.Show()
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	Set_WindowPosition_ProjectsMainWindow(){
		This.Set_AllControl_Positions_ProjectsMainWindow()
		This.Set_WindowPosition_ProjectsShellWindow()
		This.Set_ProjectsMainWindow_Sliders()
		This.ProjectsMainWindow.Show()
	}
	Set_WindowPosition_ProjectsShellWindow(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local cc := This.ProjectsShellWindow
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := controls.MoveButton.Y + controls.MoveButton.H + ym
		cc.W := window.W - ( controls.VertSlider.W + 3 * xm )
		cc.H := window.H - ( cc.Y + controls.HorzSlider.H + 3 * ym )
		cc.Show()
	}
	Set_WindowPosition_ProjectsInnerWindow(){
		local window := This.ProjectsMainWindow
		local controls := window.Controls
		local cc := This.ProjectsInnerWindow
		local dd := controls.VertSlider
		local ee := controls.HorzSlider
		cc.X := window.Get( ee ) * -1
		cc.Y := window.Get( dd ) * -1
		cc.SetPosition()
		cc.Show()
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	Set_WindowPosition_ElementsMainWindow(){
		This.Set_AllControl_Positions_ElementsMainWindow()
		This.Set_WindowPosition_ElementsShellWindow()
		This.Set_ElementsMainWindow_Sliders()
		This.ElementsMainWindow.Show()
	}
	Set_WindowPosition_ElementsShellWindow(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local cc := This.ElementsShellWindow
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := controls.MoveButton.Y + controls.MoveButton.H + ym
		cc.W := window.W - ( controls.VertSlider.W + 3 * xm )
		cc.H := window.H - ( cc.Y + controls.HorzSlider.H + 3 * ym )
		cc.Show()
	}
	Set_WindowPosition_ElementsInnerWindow(){
		local window := This.ElementsMainWindow
		local controls := window.Controls
		local cc := This.ElementsInnerWindow
		local dd := controls.VertSlider
		local ee := controls.HorzSlider
		cc.X := window.Get( ee ) * -1
		cc.Y := window.Get( dd ) * -1
		cc.SetPosition()
		cc.Show()
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	Set_All_TabPositions_ProjectsPanel(){
		This.Set_WindowPosition_ProjectTab()
		This.Set_WindowPosition_WindowTab()
		This.Set_WindowPosition_BitmapTab()
		This.Set_WindowPosition_ClassTab()
		This.Set_WindowPosition_FunctionTab()
		This.Set_WindowPosition_LabelTab()
		This.Set_WindowPosition_ScriptTab()
	}
	Set_WindowPosition_ProjectTab(){
		local window := This.ProjectsInnerWindow
		local cc := This.ProjectTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_WindowTab(){
		local window := This.ProjectsInnerWindow
		local cc := This.WindowTab
		local dd := This.ProjectTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_BitmapTab(){
		local window := This.ProjectsInnerWindow
		local cc := This.BitmapTab
		local dd := This.WindowTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_ClassTab(){
		local window := This.ProjectsInnerWindow
		local cc := This.ClassTab
		local dd := This.BitmapTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_FunctionTab(){
		local window := This.ProjectsInnerWindow
		local cc := This.FunctionTab
		local dd := This.ClassTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_LabelTab(){
		local window := This.ProjectsInnerWindow
		local cc := This.LabelTab
		local dd := This.FunctionTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_ScriptTab(){
		local window := This.ProjectsInnerWindow
		local cc := This.ScriptTab
		local dd := This.LabelTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	Set_All_TabPositions_ElementsPanel(){
		This.Set_WindowPosition_WindowElementTab()
		This.Set_WindowPosition_BitmapElementTab()
		This.Set_WindowPosition_CodeInsertTab()
		This.Set_WindowPosition_ClassElementTab()
		This.Set_WindowPosition_FunctionElementTab()
		This.Set_WindowPosition_LabelElementTab()
		This.Set_WindowPosition_VarableTab()
	}
	Set_WindowPosition_WindowElementTab(){
		local window := This.ElementsInnerWindow
		local cc := This.WindowElementTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_BitmapElementTab(){
		local window := This.ElementsInnerWindow
		local cc := This.BitmapElementTab
		local dd := This.WindowElementTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_CodeInsertTab(){
		local window := This.ElementsInnerWindow
		local cc := This.CodeInsertTab
		local dd := This.WindowElementTab
		local xm := window.MarginX
		local ym := window.MarginY
		cc.X := xm
		cc.Y := dd.Y + dd.H + ym
		if( cc.ToggleState )
			cc.H := cc.ToggleMaxSize
		else 
			cc.H := cc.ToggleMinSize
		cc.Show()
	}
	Set_WindowPosition_ClassElementTab(){
		
	}
	Set_WindowPosition_FunctionElementTab(){
		
	}
	Set_WindowPosition_LabelElementTab(){
		
	}
	Set_WindowPosition_VarableTab(){
		
	}
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	
	;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
	
}
;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
;*****		       PopUpWindow_Addons
;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
;&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&;
class PopUpWindow_Addons extends PopUpWindow_V3	{

	PostMoveWindow( win ){
		local currentWorkArea := MonitorClass.GetMonitorWorkArea( MonitorClass.MonitorPrimary )
		PostMessage, 0xA1 , 2
		While( GetKeyState( "LButton" , "P" ) )
			sleep, 30
		This[ win ].GetPosition()
		if( win = "MainWindow" ){
			if( This.MainWindow.Y <= currentWorkArea.Y && This.MainWindow.W != This.MainWindow.MaxWidth ){
				This.MainWindow.X := currentWorkArea.X
				This.MainWindow.Y := currentWorkArea.Y
				This.MainWindow.W := This.MainWindow.MaxWidth := currentWorkArea.W
				This.MainWindow.H := This.MainWindow.MaxHeight := currentWorkArea.H
				This.Set_WindowPosition_MainWindow()
			}else if( This.W = This.MaxWidth && This.H = This.MaxHeight ){
				This.PostMinSizeWindow( win )
			}
		}
	}
	PostMinSizeWindow( win ){
		if( This[ win ].ToggleWidth )
			This[ win ].W := This[ win ].ToggleWidth
		else
			This[ win ].W := This[ win ].MinWidth
		if( This[ win ].ToggleHeight )
			This[ win ].H := This[ win ].ToggleHeight
		else
			This[ win ].H := This[ win ].MinHeight
		This[ "Set_WindowPosition_" win ]()
	}
	PostMaxSizeWindow( win ){
		local currentWorkArea := MonitorClass.GetMonitorWorkArea( MonitorClass.MonitorPrimary )
		if( win = "MainWindow" ){
			This[win].X := currentWorkArea.X
			This[win].Y := currentWorkArea.Y
			This[win].W := currentWorkArea.W
			This[win].H := currentWorkArea.H
			This[ "Set_WindowPosition_" win ]()
		}else{
			This[win].W := This[win].MaxWidth
			This[win].H := This[win].MaxHeight
			This[ "Set_WindowPosition_" win ]()
		}
	}
	PostMinimizeWindow( win ){
		if( win = "MainWindow" ){
			This.MainWindow.Minimize()
		}
	}
	PostCloseWindow( win ){
		if( win = "MainWindow" )
			ExitApp
		else if( win = "ProjectsMainWindow" ){
			This.ProjectsWindowToggle := 0
			This[ win ].Hide()
		}else if( win = "ElementsMainWindow" ){
			This.ElementsWindowToggle := 0
			This[ win ].Hide()
		}else if( win = "NewProjectWindow" ){
			This.NewProjectWindow := ""
		}else if( win = "LoadProjectWindow" ){
			This.LoadProjectWindow := ""
		}else if( win = "NewWindowWindow" ){
			This.NewWindowWindow := ""
		}else if( win = "NewFunctionWindow" ){
			This.NewFunctionWindow := ""
		}else if( win = "NewCodeInsertWindow" ){
			This.NewCodeInsertWindow := ""
		}
	}
	PostResizeWindow( win ){
		local x , y , w , lw , lh , lx , ly 
		This[win].GetPosition()
		CoordMode, Mouse, Screen 
		While( GetKeyState( "LButton" , "P" ) ){
			MouseGetPos, x , y 
			if( x != lx || y != ly ){
				lx := x , ly := y 
				( ( This[win].W := x - This[win].X ) <= This[win].MinWidth ) ? ( This[win].W := This[win].MinWidth )
				( ( This[win].H := y - This[win].Y ) <= This[win].MinHeight ) ? ( This[win].H := This[win].MinHeight )
				( This[win].W > This[win].MaxWidth ) ? ( This[win].W := This[win].MaxWidth )
				( This[win].H > This[win].MaxHeight ) ? ( This[win].H := This[win].MaxHeight )
				This[win].SetPosition()
				if( lw != This[win].W || lh != This[win].H ){
					lw := This[win].W
					lh := This[win].H
					if( win = "MainWindow" && This[win].W != This[win].MaxWidth && This[win].H != This[win].MaxHeight ){
						This[ win ].ToggleWidth := This[ win ].W 
						This[ win ].ToggleHeight := This[ win ].H
					}
					
					This[ "Set_WindowPosition_" win ]()
				}
			}
		}
		This[ "Set_WindowPosition_" win ]()
	}
	PostAdjustSlider( win , control ){
		if( win = "MainWindow" )
			This.Set_WindowPosition_MainInnerWindow()
		else if( win = "ProjectsMainWindow" )
			This.Set_WindowPosition_ProjectsInnerWindow()
		else if( win = "ElementsMainWindow" )
			This.Set_WindowPosition_ElementsInnerWindow()
	}
	PostToggleTab( wintype , tab ){
		This[ tab ].ToggleState := !This[ tab ].ToggleState
		This[ "Toggle_All_" wintype "Panel_Tabs" ]()
		This[ "Set_Position_" wintype "InnerWindow_Height" ]()
		This[ "Set_" wintype "MainWindow_Sliders" ]()
		;~ ToolTip, % "Tip:`n" tab wintype
	}

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class MainInnerWindowEvents	extends MainShellWindowEvents	{

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class MainShellWindowEvents	extends MainWindowEventsClass	{

}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class MainWindowEventsClass	extends WindowSetupClass	{
	
	Set_Range_MainWindow_VertSlider(){
		local cc , range 
		cc := This.MainWindow.Controls.VertSlider
		range := 0 "-" This.MainInnerWindow.H - This.MainShellWindow.H 
		This.MainWindow.SetRange( cc , range )
	}
	Set_Range_MainWindow_HorzSlider(){
		local cc , range 
		cc := This.MainWindow.Controls.HorzSlider
		range := 0 "-" This.MainInnerWindow.W - This.MainShellWindow.W 
		This.MainWindow.SetRange( cc , range )
	}
	Set_MainWindow_Sliders(){
		This.Set_Range_MainWindow_VertSlider()
		This.Set_Range_MainWindow_HorzSlider()
	}
	Toggle_Projects_Panel(){
		if( This.ProjectsWindowToggle := !This.ProjectsWindowToggle )
			This.ProjectsMainWindow.Show()
		else
			This.ProjectsMainWindow.Hide()
		
	}
	Toggle_Elements_Panel(){
		if( This.ElementsWindowToggle := !This.ElementsWindowToggle )
			This.ElementsMainWindow.Show()
		else
			This.ElementsMainWindow.Hide()
		
	}
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ProjectsInnerWindowEvents extends ProjectsShellWindowEvents	{
	
	Set_Position_ProjectsInnerWindow_Height(){
		local cc := This.ProjectsInnerWindow
		local dd := This.ScriptTab
		local ym := cc.MarginY
		cc.H := dd.Y + dd.H + ym
		cc.Show()
	}
	Set_Focus_To_ProjectPanel_Tab( tabname ){
		local cc := This.ProjectsInnerWindow
		local dd := This[ tabname ]
		cc.Y := dd.Y * -1
		cc.Show()
	}
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ProjectsShellWindowEvents extends ProjectsMainWindowEvents	{
	
}
;|<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>||<<<___>>>|
class ProjectsMainWindowEvents extends MainInnerWindowEvents	{
	
	Set_Range_ProjectsMainWindow_VertSlider(){
		local cc , range 
		cc := This.ProjectsMainWindow.Controls.VertSlider
		range := 0 "-" This.ProjectsInnerWindow.H - This.ProjectsShellWindow.H 
		This.ProjectsMainWindow.SetRange( cc , range )
	}
	Set_Range_ProjectsMainWindow_HorzSlider(){
		local cc , range 
		cc := This.ProjectsMainWindow.Controls.HorzSlider
		range := 0 "-" This.ProjectsInnerWindow.W - This.ProjectsShellWindow.W 
		This.ProjectsMainWindow.SetRange( cc , range )
	}
	Set_ProjectsMainWindow_Sliders(){
		This.Set_Range_ProjectsMainWindow_VertSlider()
		This.Set_Range_ProjectsMainWindow_HorzSlider()
	}
	Toggle_All_ProjectsPanel_Tabs(){
		This.Set_All_TabPositions_ProjectsPanel()
	}
	
}
